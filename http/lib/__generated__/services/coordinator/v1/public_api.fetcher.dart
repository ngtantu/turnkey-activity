/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */

import 'package:turnkey_dart_http_client/__generated__/public_api.swagger.dart';
import 'package:turnkey_dart_http_client/swagger/base.dart';

/// `POST /public/v1/query/get_activity`
typedef TGetActivityResponse = V1ActivityResponse;

/// `POST /public/v1/query/get_activity`
class TGetActivityInput {
  final TGetActivityBody body;

  TGetActivityInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_activity`
typedef TGetActivityBody = V1GetActivityRequest;

/// Get Activity
///
/// Get details about an Activity
///
/// `POST /public/v1/query/get_activity`
Future<TGetActivityResponse> getActivity(
    {required TGetActivityInput input}) async {
  return request<TGetActivityResponse, TGetActivityBody, Never, Never, Never>(
    uri: "/public/v1/query/get_activity",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetActivity request, ready to be POSTed to Turnkey.
///
/// See {@link GetActivity}
Future<TSignedRequest> signGetActivity(
    {required TGetActivityInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetActivityBody, Never, Never>(
    uri: "/public/v1/query/get_activity",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_api_key`
typedef TGetApiKeyResponse = V1GetApiKeyResponse;

/// `POST /public/v1/query/get_api_key`
class TGetApiKeyInput {
  final TGetApiKeyBody body;

  TGetApiKeyInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_api_key`
typedef TGetApiKeyBody = V1GetApiKeyRequest;

/// Get API key
///
/// Get details about an API key
///
/// `POST /public/v1/query/get_api_key`
Future<TGetApiKeyResponse> getApiKey({required TGetApiKeyInput input}) async {
  return request<TGetApiKeyResponse, TGetApiKeyBody, Never, Never, Never>(
    uri: "/public/v1/query/get_api_key",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetApiKey request, ready to be POSTed to Turnkey.
///
/// See {@link GetApiKey}
Future<TSignedRequest> signGetApiKey(
    {required TGetApiKeyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetApiKeyBody, Never, Never>(
    uri: "/public/v1/query/get_api_key",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_api_keys`
typedef TGetApiKeysResponse = V1GetApiKeysResponse;

/// `POST /public/v1/query/get_api_keys`
class TGetApiKeysInput {
  final TGetApiKeysBody body;

  TGetApiKeysInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_api_keys`
typedef TGetApiKeysBody = V1GetApiKeysRequest;

/// Get API key
///
/// Get details about API keys for a user
///
/// `POST /public/v1/query/get_api_keys`
Future<TGetApiKeysResponse> getApiKeys(
    {required TGetApiKeysInput input}) async {
  return request<TGetApiKeysResponse, TGetApiKeysBody, Never, Never, Never>(
    uri: "/public/v1/query/get_api_keys",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetApiKeys request, ready to be POSTed to Turnkey.
///
/// See {@link GetApiKeys}
Future<TSignedRequest> signGetApiKeys(
    {required TGetApiKeysInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetApiKeysBody, Never, Never>(
    uri: "/public/v1/query/get_api_keys",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_attestation`
typedef TGetAttestationDocumentResponse = V1GetAttestationDocumentResponse;

/// `POST /public/v1/query/get_attestation`
class TGetAttestationDocumentInput {
  final TGetAttestationDocumentBody body;

  TGetAttestationDocumentInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_attestation`
typedef TGetAttestationDocumentBody = V1GetAttestationDocumentRequest;

/// Attestation
///
/// Get the attestation document corresponding to an enclave.
///
/// `POST /public/v1/query/get_attestation`
Future<TGetAttestationDocumentResponse> getAttestationDocument(
    {required TGetAttestationDocumentInput input}) async {
  return request<TGetAttestationDocumentResponse, TGetAttestationDocumentBody,
      Never, Never, Never>(
    uri: "/public/v1/query/get_attestation",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetAttestationDocument request, ready to be POSTed to Turnkey.
///
/// See {@link GetAttestationDocument}
Future<TSignedRequest> signGetAttestationDocument(
    {required TGetAttestationDocumentInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetAttestationDocumentBody, Never, Never>(
    uri: "/public/v1/query/get_attestation",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_authenticator`
typedef TGetAuthenticatorResponse = V1GetAuthenticatorResponse;

/// `POST /public/v1/query/get_authenticator`
class TGetAuthenticatorInput {
  final TGetAuthenticatorBody body;

  TGetAuthenticatorInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_authenticator`
typedef TGetAuthenticatorBody = V1GetAuthenticatorRequest;

/// Get Authenticator
///
/// Get details about an authenticator
///
/// `POST /public/v1/query/get_authenticator`
Future<TGetAuthenticatorResponse> getAuthenticator(
    {required TGetAuthenticatorInput input}) async {
  return request<TGetAuthenticatorResponse, TGetAuthenticatorBody, Never, Never,
      Never>(
    uri: "/public/v1/query/get_authenticator",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetAuthenticator request, ready to be POSTed to Turnkey.
///
/// See {@link GetAuthenticator}
Future<TSignedRequest> signGetAuthenticator(
    {required TGetAuthenticatorInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetAuthenticatorBody, Never, Never>(
    uri: "/public/v1/query/get_authenticator",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_authenticators`
typedef TGetAuthenticatorsResponse = V1GetAuthenticatorsResponse;

/// `POST /public/v1/query/get_authenticators`
class TGetAuthenticatorsInput {
  final TGetAuthenticatorsBody body;

  TGetAuthenticatorsInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_authenticators`
typedef TGetAuthenticatorsBody = V1GetAuthenticatorsRequest;

/// Get Authenticators
///
/// Get details about authenticators for a user
///
/// `POST /public/v1/query/get_authenticators`
Future<TGetAuthenticatorsResponse> getAuthenticators(
    {required TGetAuthenticatorsInput input}) async {
  return request<TGetAuthenticatorsResponse, TGetAuthenticatorsBody, Never,
      Never, Never>(
    uri: "/public/v1/query/get_authenticators",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetAuthenticators request, ready to be POSTed to Turnkey.
///
/// See {@link GetAuthenticators}
Future<TSignedRequest> signGetAuthenticators(
    {required TGetAuthenticatorsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetAuthenticatorsBody, Never, Never>(
    uri: "/public/v1/query/get_authenticators",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_oauth_providers`
typedef TGetOauthProvidersResponse = V1GetOauthProvidersResponse;

/// `POST /public/v1/query/get_oauth_providers`
class TGetOauthProvidersInput {
  final TGetOauthProvidersBody body;

  TGetOauthProvidersInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_oauth_providers`
typedef TGetOauthProvidersBody = V1GetOauthProvidersRequest;

/// Get Oauth providers
///
/// Get details about Oauth providers for a user
///
/// `POST /public/v1/query/get_oauth_providers`
Future<TGetOauthProvidersResponse> getOauthProviders(
    {required TGetOauthProvidersInput input}) async {
  return request<TGetOauthProvidersResponse, TGetOauthProvidersBody, Never,
      Never, Never>(
    uri: "/public/v1/query/get_oauth_providers",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetOauthProviders request, ready to be POSTed to Turnkey.
///
/// See {@link GetOauthProviders}
Future<TSignedRequest> signGetOauthProviders(
    {required TGetOauthProvidersInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetOauthProvidersBody, Never, Never>(
    uri: "/public/v1/query/get_oauth_providers",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_organization`
typedef TGetOrganizationResponse = V1GetOrganizationResponse;

/// `POST /public/v1/query/get_organization`
class TGetOrganizationInput {
  final TGetOrganizationBody body;

  TGetOrganizationInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_organization`
typedef TGetOrganizationBody = V1GetOrganizationRequest;

/// Get Organization
///
/// Get details about an Organization
///
/// `POST /public/v1/query/get_organization`
Future<TGetOrganizationResponse> getOrganization(
    {required TGetOrganizationInput input}) async {
  return request<TGetOrganizationResponse, TGetOrganizationBody, Never, Never,
      Never>(
    uri: "/public/v1/query/get_organization",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetOrganization request, ready to be POSTed to Turnkey.
///
/// See {@link GetOrganization}
Future<TSignedRequest> signGetOrganization(
    {required TGetOrganizationInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetOrganizationBody, Never, Never>(
    uri: "/public/v1/query/get_organization",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_organization_configs`
typedef TGetOrganizationConfigsResponse = V1GetOrganizationConfigsResponse;

/// `POST /public/v1/query/get_organization_configs`
class TGetOrganizationConfigsInput {
  final TGetOrganizationConfigsBody body;

  TGetOrganizationConfigsInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_organization_configs`
typedef TGetOrganizationConfigsBody = V1GetOrganizationConfigsRequest;

/// Get Configs
///
/// Get quorum settings and features for an organization
///
/// `POST /public/v1/query/get_organization_configs`
Future<TGetOrganizationConfigsResponse> getOrganizationConfigs(
    {required TGetOrganizationConfigsInput input}) async {
  return request<TGetOrganizationConfigsResponse, TGetOrganizationConfigsBody,
      Never, Never, Never>(
    uri: "/public/v1/query/get_organization_configs",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetOrganizationConfigs request, ready to be POSTed to Turnkey.
///
/// See {@link GetOrganizationConfigs}
Future<TSignedRequest> signGetOrganizationConfigs(
    {required TGetOrganizationConfigsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetOrganizationConfigsBody, Never, Never>(
    uri: "/public/v1/query/get_organization_configs",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_policy`
typedef TGetPolicyResponse = V1GetPolicyResponse;

/// `POST /public/v1/query/get_policy`
class TGetPolicyInput {
  final TGetPolicyBody body;

  TGetPolicyInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_policy`
typedef TGetPolicyBody = V1GetPolicyRequest;

/// Get Policy
///
/// Get details about a Policy
///
/// `POST /public/v1/query/get_policy`
Future<TGetPolicyResponse> getPolicy({required TGetPolicyInput input}) async {
  return request<TGetPolicyResponse, TGetPolicyBody, Never, Never, Never>(
    uri: "/public/v1/query/get_policy",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetPolicy request, ready to be POSTed to Turnkey.
///
/// See {@link GetPolicy}
Future<TSignedRequest> signGetPolicy(
    {required TGetPolicyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetPolicyBody, Never, Never>(
    uri: "/public/v1/query/get_policy",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_private_key`
typedef TGetPrivateKeyResponse = V1GetPrivateKeyResponse;

/// `POST /public/v1/query/get_private_key`
class TGetPrivateKeyInput {
  final TGetPrivateKeyBody body;

  TGetPrivateKeyInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_private_key`
typedef TGetPrivateKeyBody = V1GetPrivateKeyRequest;

/// Get Private Key
///
/// Get details about a Private Key
///
/// `POST /public/v1/query/get_private_key`
Future<TGetPrivateKeyResponse> getPrivateKey(
    {required TGetPrivateKeyInput input}) async {
  return request<TGetPrivateKeyResponse, TGetPrivateKeyBody, Never, Never,
      Never>(
    uri: "/public/v1/query/get_private_key",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetPrivateKey request, ready to be POSTed to Turnkey.
///
/// See {@link GetPrivateKey}
Future<TSignedRequest> signGetPrivateKey(
    {required TGetPrivateKeyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetPrivateKeyBody, Never, Never>(
    uri: "/public/v1/query/get_private_key",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_user`
typedef TGetUserResponse = V1GetUserResponse;

/// `POST /public/v1/query/get_user`
class TGetUserInput {
  final TGetUserBody body;

  TGetUserInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_user`
typedef TGetUserBody = V1GetUserRequest;

/// Get User
///
/// Get details about a User
///
/// `POST /public/v1/query/get_user`
Future<TGetUserResponse> getUser({required TGetUserInput input}) async {
  return request<TGetUserResponse, TGetUserBody, Never, Never, Never>(
    uri: "/public/v1/query/get_user",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetUser request, ready to be POSTed to Turnkey.
///
/// See {@link GetUser}
Future<TSignedRequest> signGetUser(
    {required TGetUserInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetUserBody, Never, Never>(
    uri: "/public/v1/query/get_user",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/get_wallet`
typedef TGetWalletResponse = V1GetWalletResponse;

/// `POST /public/v1/query/get_wallet`
class TGetWalletInput {
  final TGetWalletBody body;

  TGetWalletInput({
    required this.body,
  });
}

/// `POST /public/v1/query/get_wallet`
typedef TGetWalletBody = V1GetWalletRequest;

/// Get Wallet
///
/// Get details about a Wallet
///
/// `POST /public/v1/query/get_wallet`
Future<TGetWalletResponse> getWallet({required TGetWalletInput input}) async {
  return request<TGetWalletResponse, TGetWalletBody, Never, Never, Never>(
    uri: "/public/v1/query/get_wallet",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetWallet request, ready to be POSTed to Turnkey.
///
/// See {@link GetWallet}
Future<TSignedRequest> signGetWallet(
    {required TGetWalletInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetWalletBody, Never, Never>(
    uri: "/public/v1/query/get_wallet",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_activities`
typedef TGetActivitiesResponse = V1GetActivitiesResponse;

/// `POST /public/v1/query/list_activities`
class TGetActivitiesInput {
  final TGetActivitiesBody body;

  TGetActivitiesInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_activities`
typedef TGetActivitiesBody = V1GetActivitiesRequest;

/// List Activities
///
/// List all Activities within an Organization
///
/// `POST /public/v1/query/list_activities`
Future<TGetActivitiesResponse> getActivities(
    {required TGetActivitiesInput input}) async {
  return request<TGetActivitiesResponse, TGetActivitiesBody, Never, Never,
      Never>(
    uri: "/public/v1/query/list_activities",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetActivities request, ready to be POSTed to Turnkey.
///
/// See {@link GetActivities}
Future<TSignedRequest> signGetActivities(
    {required TGetActivitiesInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetActivitiesBody, Never, Never>(
    uri: "/public/v1/query/list_activities",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_policies`
typedef TGetPoliciesResponse = V1GetPoliciesResponse;

/// `POST /public/v1/query/list_policies`
class TGetPoliciesInput {
  final TGetPoliciesBody body;

  TGetPoliciesInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_policies`
typedef TGetPoliciesBody = V1GetPoliciesRequest;

/// List Policies
///
/// List all Policies within an Organization
///
/// `POST /public/v1/query/list_policies`
Future<TGetPoliciesResponse> getPolicies(
    {required TGetPoliciesInput input}) async {
  return request<TGetPoliciesResponse, TGetPoliciesBody, Never, Never, Never>(
    uri: "/public/v1/query/list_policies",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetPolicies request, ready to be POSTed to Turnkey.
///
/// See {@link GetPolicies}
Future<TSignedRequest> signGetPolicies(
    {required TGetPoliciesInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetPoliciesBody, Never, Never>(
    uri: "/public/v1/query/list_policies",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_private_key_tags`
typedef TListPrivateKeyTagsResponse = V1ListPrivateKeyTagsResponse;

/// `POST /public/v1/query/list_private_key_tags`
class TListPrivateKeyTagsInput {
  final TListPrivateKeyTagsBody body;

  TListPrivateKeyTagsInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_private_key_tags`
typedef TListPrivateKeyTagsBody = V1ListPrivateKeyTagsRequest;

/// List Private Key Tags
///
/// List all Private Key Tags within an Organization
///
/// `POST /public/v1/query/list_private_key_tags`
Future<TListPrivateKeyTagsResponse> listPrivateKeyTags(
    {required TListPrivateKeyTagsInput input}) async {
  return request<TListPrivateKeyTagsResponse, TListPrivateKeyTagsBody, Never,
      Never, Never>(
    uri: "/public/v1/query/list_private_key_tags",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed ListPrivateKeyTags request, ready to be POSTed to Turnkey.
///
/// See {@link ListPrivateKeyTags}
Future<TSignedRequest> signListPrivateKeyTags(
    {required TListPrivateKeyTagsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TListPrivateKeyTagsBody, Never, Never>(
    uri: "/public/v1/query/list_private_key_tags",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_private_keys`
typedef TGetPrivateKeysResponse = V1GetPrivateKeysResponse;

/// `POST /public/v1/query/list_private_keys`
class TGetPrivateKeysInput {
  final TGetPrivateKeysBody body;

  TGetPrivateKeysInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_private_keys`
typedef TGetPrivateKeysBody = V1GetPrivateKeysRequest;

/// List Private Keys
///
/// List all Private Keys within an Organization
///
/// `POST /public/v1/query/list_private_keys`
Future<TGetPrivateKeysResponse> getPrivateKeys(
    {required TGetPrivateKeysInput input}) async {
  return request<TGetPrivateKeysResponse, TGetPrivateKeysBody, Never, Never,
      Never>(
    uri: "/public/v1/query/list_private_keys",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetPrivateKeys request, ready to be POSTed to Turnkey.
///
/// See {@link GetPrivateKeys}
Future<TSignedRequest> signGetPrivateKeys(
    {required TGetPrivateKeysInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetPrivateKeysBody, Never, Never>(
    uri: "/public/v1/query/list_private_keys",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_suborgs`
typedef TGetSubOrgIdsResponse = V1GetSubOrgIdsResponse;

/// `POST /public/v1/query/list_suborgs`
class TGetSubOrgIdsInput {
  final TGetSubOrgIdsBody body;

  TGetSubOrgIdsInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_suborgs`
typedef TGetSubOrgIdsBody = V1GetSubOrgIdsRequest;

/// Get Suborgs
///
/// Get all suborg IDs associated given a parent org ID and an optional filter.
///
/// `POST /public/v1/query/list_suborgs`
Future<TGetSubOrgIdsResponse> getSubOrgIds(
    {required TGetSubOrgIdsInput input}) async {
  return request<TGetSubOrgIdsResponse, TGetSubOrgIdsBody, Never, Never, Never>(
    uri: "/public/v1/query/list_suborgs",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetSubOrgIds request, ready to be POSTed to Turnkey.
///
/// See {@link GetSubOrgIds}
Future<TSignedRequest> signGetSubOrgIds(
    {required TGetSubOrgIdsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetSubOrgIdsBody, Never, Never>(
    uri: "/public/v1/query/list_suborgs",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_user_tags`
typedef TListUserTagsResponse = V1ListUserTagsResponse;

/// `POST /public/v1/query/list_user_tags`
class TListUserTagsInput {
  final TListUserTagsBody body;

  TListUserTagsInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_user_tags`
typedef TListUserTagsBody = V1ListUserTagsRequest;

/// List User Tags
///
/// List all User Tags within an Organization
///
/// `POST /public/v1/query/list_user_tags`
Future<TListUserTagsResponse> listUserTags(
    {required TListUserTagsInput input}) async {
  return request<TListUserTagsResponse, TListUserTagsBody, Never, Never, Never>(
    uri: "/public/v1/query/list_user_tags",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed ListUserTags request, ready to be POSTed to Turnkey.
///
/// See {@link ListUserTags}
Future<TSignedRequest> signListUserTags(
    {required TListUserTagsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TListUserTagsBody, Never, Never>(
    uri: "/public/v1/query/list_user_tags",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_users`
typedef TGetUsersResponse = V1GetUsersResponse;

/// `POST /public/v1/query/list_users`
class TGetUsersInput {
  final TGetUsersBody body;

  TGetUsersInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_users`
typedef TGetUsersBody = V1GetUsersRequest;

/// List Users
///
/// List all Users within an Organization
///
/// `POST /public/v1/query/list_users`
Future<TGetUsersResponse> getUsers({required TGetUsersInput input}) async {
  return request<TGetUsersResponse, TGetUsersBody, Never, Never, Never>(
    uri: "/public/v1/query/list_users",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetUsers request, ready to be POSTed to Turnkey.
///
/// See {@link GetUsers}
Future<TSignedRequest> signGetUsers(
    {required TGetUsersInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetUsersBody, Never, Never>(
    uri: "/public/v1/query/list_users",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_verified_suborgs`
typedef TGetVerifiedSubOrgIdsResponse = V1GetVerifiedSubOrgIdsResponse;

/// `POST /public/v1/query/list_verified_suborgs`
class TGetVerifiedSubOrgIdsInput {
  final TGetVerifiedSubOrgIdsBody body;

  TGetVerifiedSubOrgIdsInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_verified_suborgs`
typedef TGetVerifiedSubOrgIdsBody = V1GetVerifiedSubOrgIdsRequest;

/// Get Verified Suborgs
///
/// Get all email or phone verified suborg IDs associated given a parent org ID.
///
/// `POST /public/v1/query/list_verified_suborgs`
Future<TGetVerifiedSubOrgIdsResponse> getVerifiedSubOrgIds(
    {required TGetVerifiedSubOrgIdsInput input}) async {
  return request<TGetVerifiedSubOrgIdsResponse, TGetVerifiedSubOrgIdsBody,
      Never, Never, Never>(
    uri: "/public/v1/query/list_verified_suborgs",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetVerifiedSubOrgIds request, ready to be POSTed to Turnkey.
///
/// See {@link GetVerifiedSubOrgIds}
Future<TSignedRequest> signGetVerifiedSubOrgIds(
    {required TGetVerifiedSubOrgIdsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetVerifiedSubOrgIdsBody, Never, Never>(
    uri: "/public/v1/query/list_verified_suborgs",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_wallet_accounts`
typedef TGetWalletAccountsResponse = V1GetWalletAccountsResponse;

/// `POST /public/v1/query/list_wallet_accounts`
class TGetWalletAccountsInput {
  final TGetWalletAccountsBody body;

  TGetWalletAccountsInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_wallet_accounts`
typedef TGetWalletAccountsBody = V1GetWalletAccountsRequest;

/// List Wallets Accounts
///
/// List all Accounts wirhin a Wallet
///
/// `POST /public/v1/query/list_wallet_accounts`
Future<TGetWalletAccountsResponse> getWalletAccounts(
    {required TGetWalletAccountsInput input}) async {
  return request<TGetWalletAccountsResponse, TGetWalletAccountsBody, Never,
      Never, Never>(
    uri: "/public/v1/query/list_wallet_accounts",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetWalletAccounts request, ready to be POSTed to Turnkey.
///
/// See {@link GetWalletAccounts}
Future<TSignedRequest> signGetWalletAccounts(
    {required TGetWalletAccountsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetWalletAccountsBody, Never, Never>(
    uri: "/public/v1/query/list_wallet_accounts",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/list_wallets`
typedef TGetWalletsResponse = V1GetWalletsResponse;

/// `POST /public/v1/query/list_wallets`
class TGetWalletsInput {
  final TGetWalletsBody body;

  TGetWalletsInput({
    required this.body,
  });
}

/// `POST /public/v1/query/list_wallets`
typedef TGetWalletsBody = V1GetWalletsRequest;

/// List Wallets
///
/// List all Wallets within an Organization
///
/// `POST /public/v1/query/list_wallets`
Future<TGetWalletsResponse> getWallets(
    {required TGetWalletsInput input}) async {
  return request<TGetWalletsResponse, TGetWalletsBody, Never, Never, Never>(
    uri: "/public/v1/query/list_wallets",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetWallets request, ready to be POSTed to Turnkey.
///
/// See {@link GetWallets}
Future<TSignedRequest> signGetWallets(
    {required TGetWalletsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetWalletsBody, Never, Never>(
    uri: "/public/v1/query/list_wallets",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/query/whoami`
typedef TGetWhoamiResponse = V1GetWhoamiResponse;

/// `POST /public/v1/query/whoami`
class TGetWhoamiInput {
  final TGetWhoamiBody body;

  TGetWhoamiInput({
    required this.body,
  });
}

/// `POST /public/v1/query/whoami`
typedef TGetWhoamiBody = V1GetWhoamiRequest;

/// Who am I?
///
/// Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
///
/// `POST /public/v1/query/whoami`
Future<TGetWhoamiResponse> getWhoami({required TGetWhoamiInput input}) async {
  return request<TGetWhoamiResponse, TGetWhoamiBody, Never, Never, Never>(
    uri: "/public/v1/query/whoami",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed GetWhoami request, ready to be POSTed to Turnkey.
///
/// See {@link GetWhoami}
Future<TSignedRequest> signGetWhoami(
    {required TGetWhoamiInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TGetWhoamiBody, Never, Never>(
    uri: "/public/v1/query/whoami",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/approve_activity`
typedef TApproveActivityResponse = V1ActivityResponse;

/// `POST /public/v1/submit/approve_activity`
class TApproveActivityInput {
  final TApproveActivityBody body;

  TApproveActivityInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/approve_activity`
typedef TApproveActivityBody = V1ApproveActivityRequest;

/// Approve Activity
///
/// Approve an Activity
///
/// `POST /public/v1/submit/approve_activity`
Future<TApproveActivityResponse> approveActivity(
    {required TApproveActivityInput input}) async {
  return request<TApproveActivityResponse, TApproveActivityBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/approve_activity",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed ApproveActivity request, ready to be POSTed to Turnkey.
///
/// See {@link ApproveActivity}
Future<TSignedRequest> signApproveActivity(
    {required TApproveActivityInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TApproveActivityBody, Never, Never>(
    uri: "/public/v1/submit/approve_activity",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_api_keys`
typedef TCreateApiKeysResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_api_keys`
class TCreateApiKeysInput {
  final TCreateApiKeysBody body;

  TCreateApiKeysInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_api_keys`
typedef TCreateApiKeysBody = V1CreateApiKeysRequest;

/// Create API Keys
///
/// Add api keys to an existing User
///
/// `POST /public/v1/submit/create_api_keys`
Future<TCreateApiKeysResponse> createApiKeys(
    {required TCreateApiKeysInput input}) async {
  return request<TCreateApiKeysResponse, TCreateApiKeysBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/create_api_keys",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateApiKeys request, ready to be POSTed to Turnkey.
///
/// See {@link CreateApiKeys}
Future<TSignedRequest> signCreateApiKeys(
    {required TCreateApiKeysInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateApiKeysBody, Never, Never>(
    uri: "/public/v1/submit/create_api_keys",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_api_only_users`
typedef TCreateApiOnlyUsersResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_api_only_users`
class TCreateApiOnlyUsersInput {
  final TCreateApiOnlyUsersBody body;

  TCreateApiOnlyUsersInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_api_only_users`
typedef TCreateApiOnlyUsersBody = V1CreateApiOnlyUsersRequest;

/// Create API-only Users
///
/// Create API-only Users in an existing Organization
///
/// `POST /public/v1/submit/create_api_only_users`
Future<TCreateApiOnlyUsersResponse> createApiOnlyUsers(
    {required TCreateApiOnlyUsersInput input}) async {
  return request<TCreateApiOnlyUsersResponse, TCreateApiOnlyUsersBody, Never,
      Never, Never>(
    uri: "/public/v1/submit/create_api_only_users",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateApiOnlyUsers request, ready to be POSTed to Turnkey.
///
/// See {@link CreateApiOnlyUsers}
Future<TSignedRequest> signCreateApiOnlyUsers(
    {required TCreateApiOnlyUsersInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateApiOnlyUsersBody, Never, Never>(
    uri: "/public/v1/submit/create_api_only_users",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_authenticators`
typedef TCreateAuthenticatorsResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_authenticators`
class TCreateAuthenticatorsInput {
  final TCreateAuthenticatorsBody body;

  TCreateAuthenticatorsInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_authenticators`
typedef TCreateAuthenticatorsBody = V1CreateAuthenticatorsRequest;

/// Create Authenticators
///
/// Create Authenticators to authenticate requests to Turnkey
///
/// `POST /public/v1/submit/create_authenticators`
Future<TCreateAuthenticatorsResponse> createAuthenticators(
    {required TCreateAuthenticatorsInput input}) async {
  return request<TCreateAuthenticatorsResponse, TCreateAuthenticatorsBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/create_authenticators",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateAuthenticators request, ready to be POSTed to Turnkey.
///
/// See {@link CreateAuthenticators}
Future<TSignedRequest> signCreateAuthenticators(
    {required TCreateAuthenticatorsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateAuthenticatorsBody, Never, Never>(
    uri: "/public/v1/submit/create_authenticators",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_invitations`
typedef TCreateInvitationsResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_invitations`
class TCreateInvitationsInput {
  final TCreateInvitationsBody body;

  TCreateInvitationsInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_invitations`
typedef TCreateInvitationsBody = V1CreateInvitationsRequest;

/// Create Invitations
///
/// Create Invitations to join an existing Organization
///
/// `POST /public/v1/submit/create_invitations`
Future<TCreateInvitationsResponse> createInvitations(
    {required TCreateInvitationsInput input}) async {
  return request<TCreateInvitationsResponse, TCreateInvitationsBody, Never,
      Never, Never>(
    uri: "/public/v1/submit/create_invitations",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateInvitations request, ready to be POSTed to Turnkey.
///
/// See {@link CreateInvitations}
Future<TSignedRequest> signCreateInvitations(
    {required TCreateInvitationsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateInvitationsBody, Never, Never>(
    uri: "/public/v1/submit/create_invitations",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_oauth_providers`
typedef TCreateOauthProvidersResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_oauth_providers`
class TCreateOauthProvidersInput {
  final TCreateOauthProvidersBody body;

  TCreateOauthProvidersInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_oauth_providers`
typedef TCreateOauthProvidersBody = V1CreateOauthProvidersRequest;

/// Create Oauth Providers
///
/// Creates Oauth providers for a specified user - BETA
///
/// `POST /public/v1/submit/create_oauth_providers`
Future<TCreateOauthProvidersResponse> createOauthProviders(
    {required TCreateOauthProvidersInput input}) async {
  return request<TCreateOauthProvidersResponse, TCreateOauthProvidersBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/create_oauth_providers",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateOauthProviders request, ready to be POSTed to Turnkey.
///
/// See {@link CreateOauthProviders}
Future<TSignedRequest> signCreateOauthProviders(
    {required TCreateOauthProvidersInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateOauthProvidersBody, Never, Never>(
    uri: "/public/v1/submit/create_oauth_providers",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_policies`
typedef TCreatePoliciesResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_policies`
class TCreatePoliciesInput {
  final TCreatePoliciesBody body;

  TCreatePoliciesInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_policies`
typedef TCreatePoliciesBody = V1CreatePoliciesRequest;

/// Create Policies
///
/// Create new Policies
///
/// `POST /public/v1/submit/create_policies`
Future<TCreatePoliciesResponse> createPolicies(
    {required TCreatePoliciesInput input}) async {
  return request<TCreatePoliciesResponse, TCreatePoliciesBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/create_policies",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreatePolicies request, ready to be POSTed to Turnkey.
///
/// See {@link CreatePolicies}
Future<TSignedRequest> signCreatePolicies(
    {required TCreatePoliciesInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreatePoliciesBody, Never, Never>(
    uri: "/public/v1/submit/create_policies",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_policy`
typedef TCreatePolicyResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_policy`
class TCreatePolicyInput {
  final TCreatePolicyBody body;

  TCreatePolicyInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_policy`
typedef TCreatePolicyBody = V1CreatePolicyRequest;

/// Create Policy
///
/// Create a new Policy
///
/// `POST /public/v1/submit/create_policy`
Future<TCreatePolicyResponse> createPolicy(
    {required TCreatePolicyInput input}) async {
  return request<TCreatePolicyResponse, TCreatePolicyBody, Never, Never, Never>(
    uri: "/public/v1/submit/create_policy",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreatePolicy request, ready to be POSTed to Turnkey.
///
/// See {@link CreatePolicy}
Future<TSignedRequest> signCreatePolicy(
    {required TCreatePolicyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreatePolicyBody, Never, Never>(
    uri: "/public/v1/submit/create_policy",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_private_key_tag`
typedef TCreatePrivateKeyTagResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_private_key_tag`
class TCreatePrivateKeyTagInput {
  final TCreatePrivateKeyTagBody body;

  TCreatePrivateKeyTagInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_private_key_tag`
typedef TCreatePrivateKeyTagBody = V1CreatePrivateKeyTagRequest;

/// Create Private Key Tag
///
/// Create a private key tag and add it to private keys.
///
/// `POST /public/v1/submit/create_private_key_tag`
Future<TCreatePrivateKeyTagResponse> createPrivateKeyTag(
    {required TCreatePrivateKeyTagInput input}) async {
  return request<TCreatePrivateKeyTagResponse, TCreatePrivateKeyTagBody, Never,
      Never, Never>(
    uri: "/public/v1/submit/create_private_key_tag",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreatePrivateKeyTag request, ready to be POSTed to Turnkey.
///
/// See {@link CreatePrivateKeyTag}
Future<TSignedRequest> signCreatePrivateKeyTag(
    {required TCreatePrivateKeyTagInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreatePrivateKeyTagBody, Never, Never>(
    uri: "/public/v1/submit/create_private_key_tag",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_private_keys`
typedef TCreatePrivateKeysResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_private_keys`
class TCreatePrivateKeysInput {
  final TCreatePrivateKeysBody body;

  TCreatePrivateKeysInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_private_keys`
typedef TCreatePrivateKeysBody = V1CreatePrivateKeysRequest;

/// Create Private Keys
///
/// Create new Private Keys
///
/// `POST /public/v1/submit/create_private_keys`
Future<TCreatePrivateKeysResponse> createPrivateKeys(
    {required TCreatePrivateKeysInput input}) async {
  return request<TCreatePrivateKeysResponse, TCreatePrivateKeysBody, Never,
      Never, Never>(
    uri: "/public/v1/submit/create_private_keys",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreatePrivateKeys request, ready to be POSTed to Turnkey.
///
/// See {@link CreatePrivateKeys}
Future<TSignedRequest> signCreatePrivateKeys(
    {required TCreatePrivateKeysInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreatePrivateKeysBody, Never, Never>(
    uri: "/public/v1/submit/create_private_keys",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_read_only_session`
typedef TCreateReadOnlySessionResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_read_only_session`
class TCreateReadOnlySessionInput {
  final TCreateReadOnlySessionBody body;

  TCreateReadOnlySessionInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_read_only_session`
typedef TCreateReadOnlySessionBody = V1CreateReadOnlySessionRequest;

/// Create Read Only Session
///
/// Create a read only session for a user (valid for 1 hour)
///
/// `POST /public/v1/submit/create_read_only_session`
Future<TCreateReadOnlySessionResponse> createReadOnlySession(
    {required TCreateReadOnlySessionInput input}) async {
  return request<TCreateReadOnlySessionResponse, TCreateReadOnlySessionBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/create_read_only_session",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateReadOnlySession request, ready to be POSTed to Turnkey.
///
/// See {@link CreateReadOnlySession}
Future<TSignedRequest> signCreateReadOnlySession(
    {required TCreateReadOnlySessionInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateReadOnlySessionBody, Never, Never>(
    uri: "/public/v1/submit/create_read_only_session",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_read_write_session`
typedef TCreateReadWriteSessionResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_read_write_session`
class TCreateReadWriteSessionInput {
  final TCreateReadWriteSessionBody body;

  TCreateReadWriteSessionInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_read_write_session`
typedef TCreateReadWriteSessionBody = V1CreateReadWriteSessionRequest;

/// Create Read Write Session
///
/// Create a read write session for a user
///
/// `POST /public/v1/submit/create_read_write_session`
Future<TCreateReadWriteSessionResponse> createReadWriteSession(
    {required TCreateReadWriteSessionInput input}) async {
  return request<TCreateReadWriteSessionResponse, TCreateReadWriteSessionBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/create_read_write_session",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateReadWriteSession request, ready to be POSTed to Turnkey.
///
/// See {@link CreateReadWriteSession}
Future<TSignedRequest> signCreateReadWriteSession(
    {required TCreateReadWriteSessionInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateReadWriteSessionBody, Never, Never>(
    uri: "/public/v1/submit/create_read_write_session",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_sub_organization`
typedef TCreateSubOrganizationResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_sub_organization`
class TCreateSubOrganizationInput {
  final TCreateSubOrganizationBody body;

  TCreateSubOrganizationInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_sub_organization`
typedef TCreateSubOrganizationBody = V1CreateSubOrganizationRequest;

/// Create Sub-Organization
///
/// Create a new Sub-Organization
///
/// `POST /public/v1/submit/create_sub_organization`
Future<TCreateSubOrganizationResponse> createSubOrganization(
    {required TCreateSubOrganizationInput input}) async {
  return request<TCreateSubOrganizationResponse, TCreateSubOrganizationBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/create_sub_organization",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateSubOrganization request, ready to be POSTed to Turnkey.
///
/// See {@link CreateSubOrganization}
Future<TSignedRequest> signCreateSubOrganization(
    {required TCreateSubOrganizationInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateSubOrganizationBody, Never, Never>(
    uri: "/public/v1/submit/create_sub_organization",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_user_tag`
typedef TCreateUserTagResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_user_tag`
class TCreateUserTagInput {
  final TCreateUserTagBody body;

  TCreateUserTagInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_user_tag`
typedef TCreateUserTagBody = V1CreateUserTagRequest;

/// Create User Tag
///
/// Create a user tag and add it to users.
///
/// `POST /public/v1/submit/create_user_tag`
Future<TCreateUserTagResponse> createUserTag(
    {required TCreateUserTagInput input}) async {
  return request<TCreateUserTagResponse, TCreateUserTagBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/create_user_tag",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateUserTag request, ready to be POSTed to Turnkey.
///
/// See {@link CreateUserTag}
Future<TSignedRequest> signCreateUserTag(
    {required TCreateUserTagInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateUserTagBody, Never, Never>(
    uri: "/public/v1/submit/create_user_tag",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_users`
typedef TCreateUsersResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_users`
class TCreateUsersInput {
  final TCreateUsersBody body;

  TCreateUsersInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_users`
typedef TCreateUsersBody = V1CreateUsersRequest;

/// Create Users
///
/// Create Users in an existing Organization
///
/// `POST /public/v1/submit/create_users`
Future<TCreateUsersResponse> createUsers(
    {required TCreateUsersInput input}) async {
  return request<TCreateUsersResponse, TCreateUsersBody, Never, Never, Never>(
    uri: "/public/v1/submit/create_users",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateUsers request, ready to be POSTed to Turnkey.
///
/// See {@link CreateUsers}
Future<TSignedRequest> signCreateUsers(
    {required TCreateUsersInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateUsersBody, Never, Never>(
    uri: "/public/v1/submit/create_users",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_wallet`
typedef TCreateWalletResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_wallet`
class TCreateWalletInput {
  final TCreateWalletBody body;

  TCreateWalletInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_wallet`
typedef TCreateWalletBody = V1CreateWalletRequest;

/// Create Wallet
///
/// Create a Wallet and derive addresses
///
/// `POST /public/v1/submit/create_wallet`
Future<TCreateWalletResponse> createWallet(
    {required TCreateWalletInput input}) async {
  return request<TCreateWalletResponse, TCreateWalletBody, Never, Never, Never>(
    uri: "/public/v1/submit/create_wallet",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateWallet request, ready to be POSTed to Turnkey.
///
/// See {@link CreateWallet}
Future<TSignedRequest> signCreateWallet(
    {required TCreateWalletInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateWalletBody, Never, Never>(
    uri: "/public/v1/submit/create_wallet",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/create_wallet_accounts`
typedef TCreateWalletAccountsResponse = V1ActivityResponse;

/// `POST /public/v1/submit/create_wallet_accounts`
class TCreateWalletAccountsInput {
  final TCreateWalletAccountsBody body;

  TCreateWalletAccountsInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/create_wallet_accounts`
typedef TCreateWalletAccountsBody = V1CreateWalletAccountsRequest;

/// Create Wallet Accounts
///
/// Derive additional addresses using an existing wallet
///
/// `POST /public/v1/submit/create_wallet_accounts`
Future<TCreateWalletAccountsResponse> createWalletAccounts(
    {required TCreateWalletAccountsInput input}) async {
  return request<TCreateWalletAccountsResponse, TCreateWalletAccountsBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/create_wallet_accounts",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed CreateWalletAccounts request, ready to be POSTed to Turnkey.
///
/// See {@link CreateWalletAccounts}
Future<TSignedRequest> signCreateWalletAccounts(
    {required TCreateWalletAccountsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TCreateWalletAccountsBody, Never, Never>(
    uri: "/public/v1/submit/create_wallet_accounts",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_api_keys`
typedef TDeleteApiKeysResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_api_keys`
class TDeleteApiKeysInput {
  final TDeleteApiKeysBody body;

  TDeleteApiKeysInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_api_keys`
typedef TDeleteApiKeysBody = V1DeleteApiKeysRequest;

/// Delete API Keys
///
/// Remove api keys from a User
///
/// `POST /public/v1/submit/delete_api_keys`
Future<TDeleteApiKeysResponse> deleteApiKeys(
    {required TDeleteApiKeysInput input}) async {
  return request<TDeleteApiKeysResponse, TDeleteApiKeysBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/delete_api_keys",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeleteApiKeys request, ready to be POSTed to Turnkey.
///
/// See {@link DeleteApiKeys}
Future<TSignedRequest> signDeleteApiKeys(
    {required TDeleteApiKeysInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeleteApiKeysBody, Never, Never>(
    uri: "/public/v1/submit/delete_api_keys",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_authenticators`
typedef TDeleteAuthenticatorsResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_authenticators`
class TDeleteAuthenticatorsInput {
  final TDeleteAuthenticatorsBody body;

  TDeleteAuthenticatorsInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_authenticators`
typedef TDeleteAuthenticatorsBody = V1DeleteAuthenticatorsRequest;

/// Delete Authenticators
///
/// Remove authenticators from a User
///
/// `POST /public/v1/submit/delete_authenticators`
Future<TDeleteAuthenticatorsResponse> deleteAuthenticators(
    {required TDeleteAuthenticatorsInput input}) async {
  return request<TDeleteAuthenticatorsResponse, TDeleteAuthenticatorsBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/delete_authenticators",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeleteAuthenticators request, ready to be POSTed to Turnkey.
///
/// See {@link DeleteAuthenticators}
Future<TSignedRequest> signDeleteAuthenticators(
    {required TDeleteAuthenticatorsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeleteAuthenticatorsBody, Never, Never>(
    uri: "/public/v1/submit/delete_authenticators",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_invitation`
typedef TDeleteInvitationResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_invitation`
class TDeleteInvitationInput {
  final TDeleteInvitationBody body;

  TDeleteInvitationInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_invitation`
typedef TDeleteInvitationBody = V1DeleteInvitationRequest;

/// Delete Invitation
///
/// Delete an existing Invitation
///
/// `POST /public/v1/submit/delete_invitation`
Future<TDeleteInvitationResponse> deleteInvitation(
    {required TDeleteInvitationInput input}) async {
  return request<TDeleteInvitationResponse, TDeleteInvitationBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/delete_invitation",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeleteInvitation request, ready to be POSTed to Turnkey.
///
/// See {@link DeleteInvitation}
Future<TSignedRequest> signDeleteInvitation(
    {required TDeleteInvitationInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeleteInvitationBody, Never, Never>(
    uri: "/public/v1/submit/delete_invitation",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_oauth_providers`
typedef TDeleteOauthProvidersResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_oauth_providers`
class TDeleteOauthProvidersInput {
  final TDeleteOauthProvidersBody body;

  TDeleteOauthProvidersInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_oauth_providers`
typedef TDeleteOauthProvidersBody = V1DeleteOauthProvidersRequest;

/// Delete Oauth Providers
///
/// Removes Oauth providers for a specified user - BETA
///
/// `POST /public/v1/submit/delete_oauth_providers`
Future<TDeleteOauthProvidersResponse> deleteOauthProviders(
    {required TDeleteOauthProvidersInput input}) async {
  return request<TDeleteOauthProvidersResponse, TDeleteOauthProvidersBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/delete_oauth_providers",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeleteOauthProviders request, ready to be POSTed to Turnkey.
///
/// See {@link DeleteOauthProviders}
Future<TSignedRequest> signDeleteOauthProviders(
    {required TDeleteOauthProvidersInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeleteOauthProvidersBody, Never, Never>(
    uri: "/public/v1/submit/delete_oauth_providers",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_policy`
typedef TDeletePolicyResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_policy`
class TDeletePolicyInput {
  final TDeletePolicyBody body;

  TDeletePolicyInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_policy`
typedef TDeletePolicyBody = V1DeletePolicyRequest;

/// Delete Policy
///
/// Delete an existing Policy
///
/// `POST /public/v1/submit/delete_policy`
Future<TDeletePolicyResponse> deletePolicy(
    {required TDeletePolicyInput input}) async {
  return request<TDeletePolicyResponse, TDeletePolicyBody, Never, Never, Never>(
    uri: "/public/v1/submit/delete_policy",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeletePolicy request, ready to be POSTed to Turnkey.
///
/// See {@link DeletePolicy}
Future<TSignedRequest> signDeletePolicy(
    {required TDeletePolicyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeletePolicyBody, Never, Never>(
    uri: "/public/v1/submit/delete_policy",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_private_key_tags`
typedef TDeletePrivateKeyTagsResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_private_key_tags`
class TDeletePrivateKeyTagsInput {
  final TDeletePrivateKeyTagsBody body;

  TDeletePrivateKeyTagsInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_private_key_tags`
typedef TDeletePrivateKeyTagsBody = V1DeletePrivateKeyTagsRequest;

/// Delete Private Key Tags
///
/// Delete Private Key Tags within an Organization
///
/// `POST /public/v1/submit/delete_private_key_tags`
Future<TDeletePrivateKeyTagsResponse> deletePrivateKeyTags(
    {required TDeletePrivateKeyTagsInput input}) async {
  return request<TDeletePrivateKeyTagsResponse, TDeletePrivateKeyTagsBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/delete_private_key_tags",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeletePrivateKeyTags request, ready to be POSTed to Turnkey.
///
/// See {@link DeletePrivateKeyTags}
Future<TSignedRequest> signDeletePrivateKeyTags(
    {required TDeletePrivateKeyTagsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeletePrivateKeyTagsBody, Never, Never>(
    uri: "/public/v1/submit/delete_private_key_tags",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_private_keys`
typedef TDeletePrivateKeysResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_private_keys`
class TDeletePrivateKeysInput {
  final TDeletePrivateKeysBody body;

  TDeletePrivateKeysInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_private_keys`
typedef TDeletePrivateKeysBody = V1DeletePrivateKeysRequest;

/// Delete Private Keys
///
/// Deletes private keys for an organization
///
/// `POST /public/v1/submit/delete_private_keys`
Future<TDeletePrivateKeysResponse> deletePrivateKeys(
    {required TDeletePrivateKeysInput input}) async {
  return request<TDeletePrivateKeysResponse, TDeletePrivateKeysBody, Never,
      Never, Never>(
    uri: "/public/v1/submit/delete_private_keys",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeletePrivateKeys request, ready to be POSTed to Turnkey.
///
/// See {@link DeletePrivateKeys}
Future<TSignedRequest> signDeletePrivateKeys(
    {required TDeletePrivateKeysInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeletePrivateKeysBody, Never, Never>(
    uri: "/public/v1/submit/delete_private_keys",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_sub_organization`
typedef TDeleteSubOrganizationResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_sub_organization`
class TDeleteSubOrganizationInput {
  final TDeleteSubOrganizationBody body;

  TDeleteSubOrganizationInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_sub_organization`
typedef TDeleteSubOrganizationBody = V1DeleteSubOrganizationRequest;

/// Delete Sub Organization
///
/// Deletes a sub organization
///
/// `POST /public/v1/submit/delete_sub_organization`
Future<TDeleteSubOrganizationResponse> deleteSubOrganization(
    {required TDeleteSubOrganizationInput input}) async {
  return request<TDeleteSubOrganizationResponse, TDeleteSubOrganizationBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/delete_sub_organization",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeleteSubOrganization request, ready to be POSTed to Turnkey.
///
/// See {@link DeleteSubOrganization}
Future<TSignedRequest> signDeleteSubOrganization(
    {required TDeleteSubOrganizationInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeleteSubOrganizationBody, Never, Never>(
    uri: "/public/v1/submit/delete_sub_organization",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_user_tags`
typedef TDeleteUserTagsResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_user_tags`
class TDeleteUserTagsInput {
  final TDeleteUserTagsBody body;

  TDeleteUserTagsInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_user_tags`
typedef TDeleteUserTagsBody = V1DeleteUserTagsRequest;

/// Delete User Tags
///
/// Delete User Tags within an Organization
///
/// `POST /public/v1/submit/delete_user_tags`
Future<TDeleteUserTagsResponse> deleteUserTags(
    {required TDeleteUserTagsInput input}) async {
  return request<TDeleteUserTagsResponse, TDeleteUserTagsBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/delete_user_tags",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeleteUserTags request, ready to be POSTed to Turnkey.
///
/// See {@link DeleteUserTags}
Future<TSignedRequest> signDeleteUserTags(
    {required TDeleteUserTagsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeleteUserTagsBody, Never, Never>(
    uri: "/public/v1/submit/delete_user_tags",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_users`
typedef TDeleteUsersResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_users`
class TDeleteUsersInput {
  final TDeleteUsersBody body;

  TDeleteUsersInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_users`
typedef TDeleteUsersBody = V1DeleteUsersRequest;

/// Delete Users
///
/// Delete Users within an Organization
///
/// `POST /public/v1/submit/delete_users`
Future<TDeleteUsersResponse> deleteUsers(
    {required TDeleteUsersInput input}) async {
  return request<TDeleteUsersResponse, TDeleteUsersBody, Never, Never, Never>(
    uri: "/public/v1/submit/delete_users",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeleteUsers request, ready to be POSTed to Turnkey.
///
/// See {@link DeleteUsers}
Future<TSignedRequest> signDeleteUsers(
    {required TDeleteUsersInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeleteUsersBody, Never, Never>(
    uri: "/public/v1/submit/delete_users",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/delete_wallets`
typedef TDeleteWalletsResponse = V1ActivityResponse;

/// `POST /public/v1/submit/delete_wallets`
class TDeleteWalletsInput {
  final TDeleteWalletsBody body;

  TDeleteWalletsInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/delete_wallets`
typedef TDeleteWalletsBody = V1DeleteWalletsRequest;

/// Delete Wallets
///
/// Deletes wallets for an organization
///
/// `POST /public/v1/submit/delete_wallets`
Future<TDeleteWalletsResponse> deleteWallets(
    {required TDeleteWalletsInput input}) async {
  return request<TDeleteWalletsResponse, TDeleteWalletsBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/delete_wallets",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed DeleteWallets request, ready to be POSTed to Turnkey.
///
/// See {@link DeleteWallets}
Future<TSignedRequest> signDeleteWallets(
    {required TDeleteWalletsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TDeleteWalletsBody, Never, Never>(
    uri: "/public/v1/submit/delete_wallets",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/email_auth`
typedef TEmailAuthResponse = V1ActivityResponse;

/// `POST /public/v1/submit/email_auth`
class TEmailAuthInput {
  final TEmailAuthBody body;

  TEmailAuthInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/email_auth`
typedef TEmailAuthBody = V1EmailAuthRequest;

/// Perform Email Auth
///
/// Authenticate a user via Email
///
/// `POST /public/v1/submit/email_auth`
Future<TEmailAuthResponse> emailAuth({required TEmailAuthInput input}) async {
  return request<TEmailAuthResponse, TEmailAuthBody, Never, Never, Never>(
    uri: "/public/v1/submit/email_auth",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed EmailAuth request, ready to be POSTed to Turnkey.
///
/// See {@link EmailAuth}
Future<TSignedRequest> signEmailAuth(
    {required TEmailAuthInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TEmailAuthBody, Never, Never>(
    uri: "/public/v1/submit/email_auth",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/export_private_key`
typedef TExportPrivateKeyResponse = V1ActivityResponse;

/// `POST /public/v1/submit/export_private_key`
class TExportPrivateKeyInput {
  final TExportPrivateKeyBody body;

  TExportPrivateKeyInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/export_private_key`
typedef TExportPrivateKeyBody = V1ExportPrivateKeyRequest;

/// Export Private Key
///
/// Exports a Private Key
///
/// `POST /public/v1/submit/export_private_key`
Future<TExportPrivateKeyResponse> exportPrivateKey(
    {required TExportPrivateKeyInput input}) async {
  return request<TExportPrivateKeyResponse, TExportPrivateKeyBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/export_private_key",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed ExportPrivateKey request, ready to be POSTed to Turnkey.
///
/// See {@link ExportPrivateKey}
Future<TSignedRequest> signExportPrivateKey(
    {required TExportPrivateKeyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TExportPrivateKeyBody, Never, Never>(
    uri: "/public/v1/submit/export_private_key",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/export_wallet`
typedef TExportWalletResponse = V1ActivityResponse;

/// `POST /public/v1/submit/export_wallet`
class TExportWalletInput {
  final TExportWalletBody body;

  TExportWalletInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/export_wallet`
typedef TExportWalletBody = V1ExportWalletRequest;

/// Export Wallet
///
/// Exports a Wallet
///
/// `POST /public/v1/submit/export_wallet`
Future<TExportWalletResponse> exportWallet(
    {required TExportWalletInput input}) async {
  return request<TExportWalletResponse, TExportWalletBody, Never, Never, Never>(
    uri: "/public/v1/submit/export_wallet",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed ExportWallet request, ready to be POSTed to Turnkey.
///
/// See {@link ExportWallet}
Future<TSignedRequest> signExportWallet(
    {required TExportWalletInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TExportWalletBody, Never, Never>(
    uri: "/public/v1/submit/export_wallet",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/export_wallet_account`
typedef TExportWalletAccountResponse = V1ActivityResponse;

/// `POST /public/v1/submit/export_wallet_account`
class TExportWalletAccountInput {
  final TExportWalletAccountBody body;

  TExportWalletAccountInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/export_wallet_account`
typedef TExportWalletAccountBody = V1ExportWalletAccountRequest;

/// Export Wallet Account
///
/// Exports a Wallet Account
///
/// `POST /public/v1/submit/export_wallet_account`
Future<TExportWalletAccountResponse> exportWalletAccount(
    {required TExportWalletAccountInput input}) async {
  return request<TExportWalletAccountResponse, TExportWalletAccountBody, Never,
      Never, Never>(
    uri: "/public/v1/submit/export_wallet_account",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed ExportWalletAccount request, ready to be POSTed to Turnkey.
///
/// See {@link ExportWalletAccount}
Future<TSignedRequest> signExportWalletAccount(
    {required TExportWalletAccountInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TExportWalletAccountBody, Never, Never>(
    uri: "/public/v1/submit/export_wallet_account",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/import_private_key`
typedef TImportPrivateKeyResponse = V1ActivityResponse;

/// `POST /public/v1/submit/import_private_key`
class TImportPrivateKeyInput {
  final TImportPrivateKeyBody body;

  TImportPrivateKeyInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/import_private_key`
typedef TImportPrivateKeyBody = V1ImportPrivateKeyRequest;

/// Import Private Key
///
/// Imports a private key
///
/// `POST /public/v1/submit/import_private_key`
Future<TImportPrivateKeyResponse> importPrivateKey(
    {required TImportPrivateKeyInput input}) async {
  return request<TImportPrivateKeyResponse, TImportPrivateKeyBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/import_private_key",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed ImportPrivateKey request, ready to be POSTed to Turnkey.
///
/// See {@link ImportPrivateKey}
Future<TSignedRequest> signImportPrivateKey(
    {required TImportPrivateKeyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TImportPrivateKeyBody, Never, Never>(
    uri: "/public/v1/submit/import_private_key",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/import_wallet`
typedef TImportWalletResponse = V1ActivityResponse;

/// `POST /public/v1/submit/import_wallet`
class TImportWalletInput {
  final TImportWalletBody body;

  TImportWalletInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/import_wallet`
typedef TImportWalletBody = V1ImportWalletRequest;

/// Import Wallet
///
/// Imports a wallet
///
/// `POST /public/v1/submit/import_wallet`
Future<TImportWalletResponse> importWallet(
    {required TImportWalletInput input}) async {
  return request<TImportWalletResponse, TImportWalletBody, Never, Never, Never>(
    uri: "/public/v1/submit/import_wallet",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed ImportWallet request, ready to be POSTed to Turnkey.
///
/// See {@link ImportWallet}
Future<TSignedRequest> signImportWallet(
    {required TImportWalletInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TImportWalletBody, Never, Never>(
    uri: "/public/v1/submit/import_wallet",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/init_import_private_key`
typedef TInitImportPrivateKeyResponse = V1ActivityResponse;

/// `POST /public/v1/submit/init_import_private_key`
class TInitImportPrivateKeyInput {
  final TInitImportPrivateKeyBody body;

  TInitImportPrivateKeyInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/init_import_private_key`
typedef TInitImportPrivateKeyBody = V1InitImportPrivateKeyRequest;

/// Init Import Private Key
///
/// Initializes a new private key import
///
/// `POST /public/v1/submit/init_import_private_key`
Future<TInitImportPrivateKeyResponse> initImportPrivateKey(
    {required TInitImportPrivateKeyInput input}) async {
  return request<TInitImportPrivateKeyResponse, TInitImportPrivateKeyBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/init_import_private_key",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed InitImportPrivateKey request, ready to be POSTed to Turnkey.
///
/// See {@link InitImportPrivateKey}
Future<TSignedRequest> signInitImportPrivateKey(
    {required TInitImportPrivateKeyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TInitImportPrivateKeyBody, Never, Never>(
    uri: "/public/v1/submit/init_import_private_key",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/init_import_wallet`
typedef TInitImportWalletResponse = V1ActivityResponse;

/// `POST /public/v1/submit/init_import_wallet`
class TInitImportWalletInput {
  final TInitImportWalletBody body;

  TInitImportWalletInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/init_import_wallet`
typedef TInitImportWalletBody = V1InitImportWalletRequest;

/// Init Import Wallet
///
/// Initializes a new wallet import
///
/// `POST /public/v1/submit/init_import_wallet`
Future<TInitImportWalletResponse> initImportWallet(
    {required TInitImportWalletInput input}) async {
  return request<TInitImportWalletResponse, TInitImportWalletBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/init_import_wallet",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed InitImportWallet request, ready to be POSTed to Turnkey.
///
/// See {@link InitImportWallet}
Future<TSignedRequest> signInitImportWallet(
    {required TInitImportWalletInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TInitImportWalletBody, Never, Never>(
    uri: "/public/v1/submit/init_import_wallet",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/init_otp_auth`
typedef TInitOtpAuthResponse = V1ActivityResponse;

/// `POST /public/v1/submit/init_otp_auth`
class TInitOtpAuthInput {
  final TInitOtpAuthBody body;

  TInitOtpAuthInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/init_otp_auth`
typedef TInitOtpAuthBody = V1InitOtpAuthRequest;

/// Init OTP auth
///
/// Initiate an OTP auth activity
///
/// `POST /public/v1/submit/init_otp_auth`
Future<TInitOtpAuthResponse> initOtpAuth(
    {required TInitOtpAuthInput input}) async {
  return request<TInitOtpAuthResponse, TInitOtpAuthBody, Never, Never, Never>(
    uri: "/public/v1/submit/init_otp_auth",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed InitOtpAuth request, ready to be POSTed to Turnkey.
///
/// See {@link InitOtpAuth}
Future<TSignedRequest> signInitOtpAuth(
    {required TInitOtpAuthInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TInitOtpAuthBody, Never, Never>(
    uri: "/public/v1/submit/init_otp_auth",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/init_user_email_recovery`
typedef TInitUserEmailRecoveryResponse = V1ActivityResponse;

/// `POST /public/v1/submit/init_user_email_recovery`
class TInitUserEmailRecoveryInput {
  final TInitUserEmailRecoveryBody body;

  TInitUserEmailRecoveryInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/init_user_email_recovery`
typedef TInitUserEmailRecoveryBody = V1InitUserEmailRecoveryRequest;

/// Init Email Recovery
///
/// Initializes a new email recovery
///
/// `POST /public/v1/submit/init_user_email_recovery`
Future<TInitUserEmailRecoveryResponse> initUserEmailRecovery(
    {required TInitUserEmailRecoveryInput input}) async {
  return request<TInitUserEmailRecoveryResponse, TInitUserEmailRecoveryBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/init_user_email_recovery",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed InitUserEmailRecovery request, ready to be POSTed to Turnkey.
///
/// See {@link InitUserEmailRecovery}
Future<TSignedRequest> signInitUserEmailRecovery(
    {required TInitUserEmailRecoveryInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TInitUserEmailRecoveryBody, Never, Never>(
    uri: "/public/v1/submit/init_user_email_recovery",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/oauth`
typedef TOauthResponse = V1ActivityResponse;

/// `POST /public/v1/submit/oauth`
class TOauthInput {
  final TOauthBody body;

  TOauthInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/oauth`
typedef TOauthBody = V1OauthRequest;

/// Oauth
///
/// Authenticate a user with an Oidc token (Oauth) - BETA
///
/// `POST /public/v1/submit/oauth`
Future<TOauthResponse> oauth({required TOauthInput input}) async {
  return request<TOauthResponse, TOauthBody, Never, Never, Never>(
    uri: "/public/v1/submit/oauth",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed Oauth request, ready to be POSTed to Turnkey.
///
/// See {@link Oauth}
Future<TSignedRequest> signOauth(
    {required TOauthInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TOauthBody, Never, Never>(
    uri: "/public/v1/submit/oauth",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/otp_auth`
typedef TOtpAuthResponse = V1ActivityResponse;

/// `POST /public/v1/submit/otp_auth`
class TOtpAuthInput {
  final TOtpAuthBody body;

  TOtpAuthInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/otp_auth`
typedef TOtpAuthBody = V1OtpAuthRequest;

/// OTP auth
///
/// Authenticate a user with an OTP code sent via email or SMS
///
/// `POST /public/v1/submit/otp_auth`
Future<TOtpAuthResponse> otpAuth({required TOtpAuthInput input}) async {
  return request<TOtpAuthResponse, TOtpAuthBody, Never, Never, Never>(
    uri: "/public/v1/submit/otp_auth",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed OtpAuth request, ready to be POSTed to Turnkey.
///
/// See {@link OtpAuth}
Future<TSignedRequest> signOtpAuth(
    {required TOtpAuthInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TOtpAuthBody, Never, Never>(
    uri: "/public/v1/submit/otp_auth",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/recover_user`
typedef TRecoverUserResponse = V1ActivityResponse;

/// `POST /public/v1/submit/recover_user`
class TRecoverUserInput {
  final TRecoverUserBody body;

  TRecoverUserInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/recover_user`
typedef TRecoverUserBody = V1RecoverUserRequest;

/// Recover a user
///
/// Completes the process of recovering a user by adding an authenticator
///
/// `POST /public/v1/submit/recover_user`
Future<TRecoverUserResponse> recoverUser(
    {required TRecoverUserInput input}) async {
  return request<TRecoverUserResponse, TRecoverUserBody, Never, Never, Never>(
    uri: "/public/v1/submit/recover_user",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed RecoverUser request, ready to be POSTed to Turnkey.
///
/// See {@link RecoverUser}
Future<TSignedRequest> signRecoverUser(
    {required TRecoverUserInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TRecoverUserBody, Never, Never>(
    uri: "/public/v1/submit/recover_user",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/reject_activity`
typedef TRejectActivityResponse = V1ActivityResponse;

/// `POST /public/v1/submit/reject_activity`
class TRejectActivityInput {
  final TRejectActivityBody body;

  TRejectActivityInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/reject_activity`
typedef TRejectActivityBody = V1RejectActivityRequest;

/// Reject Activity
///
/// Reject an Activity
///
/// `POST /public/v1/submit/reject_activity`
Future<TRejectActivityResponse> rejectActivity(
    {required TRejectActivityInput input}) async {
  return request<TRejectActivityResponse, TRejectActivityBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/reject_activity",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed RejectActivity request, ready to be POSTed to Turnkey.
///
/// See {@link RejectActivity}
Future<TSignedRequest> signRejectActivity(
    {required TRejectActivityInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TRejectActivityBody, Never, Never>(
    uri: "/public/v1/submit/reject_activity",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/remove_organization_feature`
typedef TRemoveOrganizationFeatureResponse = V1ActivityResponse;

/// `POST /public/v1/submit/remove_organization_feature`
class TRemoveOrganizationFeatureInput {
  final TRemoveOrganizationFeatureBody body;

  TRemoveOrganizationFeatureInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/remove_organization_feature`
typedef TRemoveOrganizationFeatureBody = V1RemoveOrganizationFeatureRequest;

/// Remove Organization Feature
///
/// Removes an organization feature. This activity must be approved by the current root quorum.
///
/// `POST /public/v1/submit/remove_organization_feature`
Future<TRemoveOrganizationFeatureResponse> removeOrganizationFeature(
    {required TRemoveOrganizationFeatureInput input}) async {
  return request<TRemoveOrganizationFeatureResponse,
      TRemoveOrganizationFeatureBody, Never, Never, Never>(
    uri: "/public/v1/submit/remove_organization_feature",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed RemoveOrganizationFeature request, ready to be POSTed to Turnkey.
///
/// See {@link RemoveOrganizationFeature}
Future<TSignedRequest> signRemoveOrganizationFeature(
    {required TRemoveOrganizationFeatureInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TRemoveOrganizationFeatureBody, Never, Never>(
    uri: "/public/v1/submit/remove_organization_feature",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/set_organization_feature`
typedef TSetOrganizationFeatureResponse = V1ActivityResponse;

/// `POST /public/v1/submit/set_organization_feature`
class TSetOrganizationFeatureInput {
  final TSetOrganizationFeatureBody body;

  TSetOrganizationFeatureInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/set_organization_feature`
typedef TSetOrganizationFeatureBody = V1SetOrganizationFeatureRequest;

/// Set Organization Feature
///
/// Sets an organization feature. This activity must be approved by the current root quorum.
///
/// `POST /public/v1/submit/set_organization_feature`
Future<TSetOrganizationFeatureResponse> setOrganizationFeature(
    {required TSetOrganizationFeatureInput input}) async {
  return request<TSetOrganizationFeatureResponse, TSetOrganizationFeatureBody,
      Never, Never, Never>(
    uri: "/public/v1/submit/set_organization_feature",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed SetOrganizationFeature request, ready to be POSTed to Turnkey.
///
/// See {@link SetOrganizationFeature}
Future<TSignedRequest> signSetOrganizationFeature(
    {required TSetOrganizationFeatureInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TSetOrganizationFeatureBody, Never, Never>(
    uri: "/public/v1/submit/set_organization_feature",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/sign_raw_payload`
typedef TSignRawPayloadResponse = V1ActivityResponse;

/// `POST /public/v1/submit/sign_raw_payload`
class TSignRawPayloadInput {
  final TSignRawPayloadBody body;

  TSignRawPayloadInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/sign_raw_payload`
typedef TSignRawPayloadBody = V1SignRawPayloadRequest;

/// Sign Raw Payload
///
/// Sign a raw payload
///
/// `POST /public/v1/submit/sign_raw_payload`
Future<TSignRawPayloadResponse> signRawPayload(
    {required TSignRawPayloadInput input}) async {
  return request<TSignRawPayloadResponse, TSignRawPayloadBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/sign_raw_payload",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed SignRawPayload request, ready to be POSTed to Turnkey.
///
/// See {@link SignRawPayload}
Future<TSignedRequest> signSignRawPayload(
    {required TSignRawPayloadInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TSignRawPayloadBody, Never, Never>(
    uri: "/public/v1/submit/sign_raw_payload",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/sign_raw_payloads`
typedef TSignRawPayloadsResponse = V1ActivityResponse;

/// `POST /public/v1/submit/sign_raw_payloads`
class TSignRawPayloadsInput {
  final TSignRawPayloadsBody body;

  TSignRawPayloadsInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/sign_raw_payloads`
typedef TSignRawPayloadsBody = V1SignRawPayloadsRequest;

/// Sign Raw Payloads
///
/// Sign multiple raw payloads with the same signing parameters
///
/// `POST /public/v1/submit/sign_raw_payloads`
Future<TSignRawPayloadsResponse> signRawPayloads(
    {required TSignRawPayloadsInput input}) async {
  return request<TSignRawPayloadsResponse, TSignRawPayloadsBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/sign_raw_payloads",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed SignRawPayloads request, ready to be POSTed to Turnkey.
///
/// See {@link SignRawPayloads}
Future<TSignedRequest> signSignRawPayloads(
    {required TSignRawPayloadsInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TSignRawPayloadsBody, Never, Never>(
    uri: "/public/v1/submit/sign_raw_payloads",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/sign_transaction`
typedef TSignTransactionResponse = V1ActivityResponse;

/// `POST /public/v1/submit/sign_transaction`
class TSignTransactionInput {
  final TSignTransactionBody body;

  TSignTransactionInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/sign_transaction`
typedef TSignTransactionBody = V1SignTransactionRequest;

/// Sign Transaction
///
/// Sign a transaction
///
/// `POST /public/v1/submit/sign_transaction`
Future<TSignTransactionResponse> signTransaction(
    {required TSignTransactionInput input}) async {
  return request<TSignTransactionResponse, TSignTransactionBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/sign_transaction",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed SignTransaction request, ready to be POSTed to Turnkey.
///
/// See {@link SignTransaction}
Future<TSignedRequest> signSignTransaction(
    {required TSignTransactionInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TSignTransactionBody, Never, Never>(
    uri: "/public/v1/submit/sign_transaction",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/update_policy`
typedef TUpdatePolicyResponse = V1ActivityResponse;

/// `POST /public/v1/submit/update_policy`
class TUpdatePolicyInput {
  final TUpdatePolicyBody body;

  TUpdatePolicyInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/update_policy`
typedef TUpdatePolicyBody = V1UpdatePolicyRequest;

/// Update Policy
///
/// Update an existing Policy
///
/// `POST /public/v1/submit/update_policy`
Future<TUpdatePolicyResponse> updatePolicy(
    {required TUpdatePolicyInput input}) async {
  return request<TUpdatePolicyResponse, TUpdatePolicyBody, Never, Never, Never>(
    uri: "/public/v1/submit/update_policy",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed UpdatePolicy request, ready to be POSTed to Turnkey.
///
/// See {@link UpdatePolicy}
Future<TSignedRequest> signUpdatePolicy(
    {required TUpdatePolicyInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TUpdatePolicyBody, Never, Never>(
    uri: "/public/v1/submit/update_policy",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/update_private_key_tag`
typedef TUpdatePrivateKeyTagResponse = V1ActivityResponse;

/// `POST /public/v1/submit/update_private_key_tag`
class TUpdatePrivateKeyTagInput {
  final TUpdatePrivateKeyTagBody body;

  TUpdatePrivateKeyTagInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/update_private_key_tag`
typedef TUpdatePrivateKeyTagBody = V1UpdatePrivateKeyTagRequest;

/// Update Private Key Tag
///
/// Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
///
/// `POST /public/v1/submit/update_private_key_tag`
Future<TUpdatePrivateKeyTagResponse> updatePrivateKeyTag(
    {required TUpdatePrivateKeyTagInput input}) async {
  return request<TUpdatePrivateKeyTagResponse, TUpdatePrivateKeyTagBody, Never,
      Never, Never>(
    uri: "/public/v1/submit/update_private_key_tag",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed UpdatePrivateKeyTag request, ready to be POSTed to Turnkey.
///
/// See {@link UpdatePrivateKeyTag}
Future<TSignedRequest> signUpdatePrivateKeyTag(
    {required TUpdatePrivateKeyTagInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TUpdatePrivateKeyTagBody, Never, Never>(
    uri: "/public/v1/submit/update_private_key_tag",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/update_root_quorum`
typedef TUpdateRootQuorumResponse = V1ActivityResponse;

/// `POST /public/v1/submit/update_root_quorum`
class TUpdateRootQuorumInput {
  final TUpdateRootQuorumBody body;

  TUpdateRootQuorumInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/update_root_quorum`
typedef TUpdateRootQuorumBody = V1UpdateRootQuorumRequest;

/// Update Root Quorum
///
/// Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
///
/// `POST /public/v1/submit/update_root_quorum`
Future<TUpdateRootQuorumResponse> updateRootQuorum(
    {required TUpdateRootQuorumInput input}) async {
  return request<TUpdateRootQuorumResponse, TUpdateRootQuorumBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/update_root_quorum",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed UpdateRootQuorum request, ready to be POSTed to Turnkey.
///
/// See {@link UpdateRootQuorum}
Future<TSignedRequest> signUpdateRootQuorum(
    {required TUpdateRootQuorumInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TUpdateRootQuorumBody, Never, Never>(
    uri: "/public/v1/submit/update_root_quorum",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/update_user`
typedef TUpdateUserResponse = V1ActivityResponse;

/// `POST /public/v1/submit/update_user`
class TUpdateUserInput {
  final TUpdateUserBody body;

  TUpdateUserInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/update_user`
typedef TUpdateUserBody = V1UpdateUserRequest;

/// Update User
///
/// Update a User in an existing Organization
///
/// `POST /public/v1/submit/update_user`
Future<TUpdateUserResponse> updateUser(
    {required TUpdateUserInput input}) async {
  return request<TUpdateUserResponse, TUpdateUserBody, Never, Never, Never>(
    uri: "/public/v1/submit/update_user",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed UpdateUser request, ready to be POSTed to Turnkey.
///
/// See {@link UpdateUser}
Future<TSignedRequest> signUpdateUser(
    {required TUpdateUserInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TUpdateUserBody, Never, Never>(
    uri: "/public/v1/submit/update_user",
    body: input.body,
    options: options,
  );
}

/// `POST /public/v1/submit/update_user_tag`
typedef TUpdateUserTagResponse = V1ActivityResponse;

/// `POST /public/v1/submit/update_user_tag`
class TUpdateUserTagInput {
  final TUpdateUserTagBody body;

  TUpdateUserTagInput({
    required this.body,
  });
}

/// `POST /public/v1/submit/update_user_tag`
typedef TUpdateUserTagBody = V1UpdateUserTagRequest;

/// Update User Tag
///
/// Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
///
/// `POST /public/v1/submit/update_user_tag`
Future<TUpdateUserTagResponse> updateUserTag(
    {required TUpdateUserTagInput input}) async {
  return request<TUpdateUserTagResponse, TUpdateUserTagBody, Never, Never,
      Never>(
    uri: "/public/v1/submit/update_user_tag",
    method: "POST",
    body: input.body,
  );
}

/// Request a WebAuthn assertion and return a signed UpdateUserTag request, ready to be POSTed to Turnkey.
///
/// See {@link UpdateUserTag}
Future<TSignedRequest> signUpdateUserTag(
    {required TUpdateUserTagInput input,
    TurnkeyCredentialRequestOptions? options}) async {
  return signedRequest<TUpdateUserTagBody, Never, Never>(
    uri: "/public/v1/submit/update_user_tag",
    body: input.body,
    options: options,
  );
}

/// `POST /tkhq/api/v1/noop-codegen-anchor`
typedef TNOOPCodegenAnchorResponse = V1NOOPCodegenAnchorResponse;

/// `POST /tkhq/api/v1/noop-codegen-anchor`
Future<TNOOPCodegenAnchorResponse> nOOPCodegenAnchor() async {
  return request<TNOOPCodegenAnchorResponse, Never, Never, Never, Never>(
    uri: "/tkhq/api/v1/noop-codegen-anchor",
    method: "POST",
  );
}

/// Request a WebAuthn assertion and return a signed NOOPCodegenAnchor request, ready to be POSTed to Turnkey.
///
/// See {@link NOOPCodegenAnchor}
Future<TSignedRequest> signNOOPCodegenAnchor(
    TurnkeyCredentialRequestOptions? options) async {
  return signedRequest<Never, Never, Never>(
    uri: "/tkhq/api/v1/noop-codegen-anchor",
    options: options,
  );
}
