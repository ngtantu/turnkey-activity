/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */

import "package:turnkey_dart_http_client/swagger/base.dart" hide request;
import "package:turnkey_dart_http_client/swagger/public_api.fetcher.dart";
import "dart:convert";
import "dart:async";
import "dart:io";

/// HTTP Client for interacting with Turnkey API
class TurnkeyClient {
  final THttpConfig config;
  final TStamper stamper;

  TurnkeyClient({required this.config, required this.stamper}) {
    if (config.baseUrl.isEmpty) {
      throw Exception('Missing base URL. Please verify environment variables.');
    }
  }

  Future<TResponseType> request<TBodyType, TResponseType>(
    String url,
    TBodyType body,
  ) async {
    final fullUrl = '${config.baseUrl}$url';
    final stringifiedBody = jsonEncode(body);
    final stamp = await stamper.stamp(stringifiedBody);

    final client = HttpClient();
    try {
      final request = await client.postUrl(Uri.parse(fullUrl));
      request.headers.set(stamp.stampHeaderName, stamp.stampHeaderValue);
      request.headers.set('X-Client-Version', VERSION);
      request.headers.contentType = ContentType.json;
      request.write(stringifiedBody);

      final response = await request.close();

      if (response.statusCode != 200) {
        final errorBody = await response.transform(utf8.decoder).join();
        throw TurnkeyRequestError(
          GrpcStatus.fromJson(jsonDecode(errorBody)),
        );
      }

      final responseBody = await response.transform(utf8.decoder).join();
      return jsonDecode(responseBody) as TResponseType;
    } finally {
      client.close();
    }
  }

  /// Get details about an Activity
  ///
  /// Sign the provided `TGetActivityBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_activity).
  ///
  /// See also: `stampGetActivity`.

  Future<TGetActivityResponse> getActivity({
    required TGetActivityBody input,
  }) async {
    return await request<TGetActivityResponse, TGetActivityBody>(
      uri: "/public/v1/query/get_activity",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.
  ///
  /// See also: `GetActivity`.

  Future<TSignedRequest> stampGetActivity({
    required TGetActivityBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_activity';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about an API key
  ///
  /// Sign the provided `TGetApiKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_api_key).
  ///
  /// See also: `stampGetApiKey`.

  Future<TGetApiKeyResponse> getApiKey({
    required TGetApiKeyBody input,
  }) async {
    return await request<TGetApiKeyResponse, TGetApiKeyBody>(
      uri: "/public/v1/query/get_api_key",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `GetApiKey`.

  Future<TSignedRequest> stampGetApiKey({
    required TGetApiKeyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_api_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about API keys for a user
  ///
  /// Sign the provided `TGetApiKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_api_keys).
  ///
  /// See also: `stampGetApiKeys`.

  Future<TGetApiKeysResponse> getApiKeys({
    required TGetApiKeysBody input,
  }) async {
    return await request<TGetApiKeysResponse, TGetApiKeysBody>(
      uri: "/public/v1/query/get_api_keys",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `GetApiKeys`.

  Future<TSignedRequest> stampGetApiKeys({
    required TGetApiKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_api_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get the attestation document corresponding to an enclave.
  ///
  /// Sign the provided `TGetAttestationDocumentBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_attestation).
  ///
  /// See also: `stampGetAttestationDocument`.

  Future<TGetAttestationDocumentResponse> getAttestationDocument({
    required TGetAttestationDocumentBody input,
  }) async {
    return await request<TGetAttestationDocumentResponse,
        TGetAttestationDocumentBody>(
      uri: "/public/v1/query/get_attestation",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetAttestationDocumentBody` by using the client's `stamp` function.
  ///
  /// See also: `GetAttestationDocument`.

  Future<TSignedRequest> stampGetAttestationDocument({
    required TGetAttestationDocumentBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_attestation';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about an authenticator
  ///
  /// Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_authenticator).
  ///
  /// See also: `stampGetAuthenticator`.

  Future<TGetAuthenticatorResponse> getAuthenticator({
    required TGetAuthenticatorBody input,
  }) async {
    return await request<TGetAuthenticatorResponse, TGetAuthenticatorBody>(
      uri: "/public/v1/query/get_authenticator",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.
  ///
  /// See also: `GetAuthenticator`.

  Future<TSignedRequest> stampGetAuthenticator({
    required TGetAuthenticatorBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_authenticator';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about authenticators for a user
  ///
  /// Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_authenticators).
  ///
  /// See also: `stampGetAuthenticators`.

  Future<TGetAuthenticatorsResponse> getAuthenticators({
    required TGetAuthenticatorsBody input,
  }) async {
    return await request<TGetAuthenticatorsResponse, TGetAuthenticatorsBody>(
      uri: "/public/v1/query/get_authenticators",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetAuthenticators`.

  Future<TSignedRequest> stampGetAuthenticators({
    required TGetAuthenticatorsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_authenticators';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about Oauth providers for a user
  ///
  /// Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_oauth_providers).
  ///
  /// See also: `stampGetOauthProviders`.

  Future<TGetOauthProvidersResponse> getOauthProviders({
    required TGetOauthProvidersBody input,
  }) async {
    return await request<TGetOauthProvidersResponse, TGetOauthProvidersBody>(
      uri: "/public/v1/query/get_oauth_providers",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.
  ///
  /// See also: `GetOauthProviders`.

  Future<TSignedRequest> stampGetOauthProviders({
    required TGetOauthProvidersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_oauth_providers';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about an Organization
  ///
  /// Sign the provided `TGetOrganizationBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_organization).
  ///
  /// See also: `stampGetOrganization`.

  Future<TGetOrganizationResponse> getOrganization({
    required TGetOrganizationBody input,
  }) async {
    return await request<TGetOrganizationResponse, TGetOrganizationBody>(
      uri: "/public/v1/query/get_organization",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.
  ///
  /// See also: `GetOrganization`.

  Future<TSignedRequest> stampGetOrganization({
    required TGetOrganizationBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_organization';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get quorum settings and features for an organization
  ///
  /// Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_organization_configs).
  ///
  /// See also: `stampGetOrganizationConfigs`.

  Future<TGetOrganizationConfigsResponse> getOrganizationConfigs({
    required TGetOrganizationConfigsBody input,
  }) async {
    return await request<TGetOrganizationConfigsResponse,
        TGetOrganizationConfigsBody>(
      uri: "/public/v1/query/get_organization_configs",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetOrganizationConfigs`.

  Future<TSignedRequest> stampGetOrganizationConfigs({
    required TGetOrganizationConfigsBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/query/get_organization_configs';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a Policy
  ///
  /// Sign the provided `TGetPolicyBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_policy).
  ///
  /// See also: `stampGetPolicy`.

  Future<TGetPolicyResponse> getPolicy({
    required TGetPolicyBody input,
  }) async {
    return await request<TGetPolicyResponse, TGetPolicyBody>(
      uri: "/public/v1/query/get_policy",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPolicy`.

  Future<TSignedRequest> stampGetPolicy({
    required TGetPolicyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_policy';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a Private Key
  ///
  /// Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_private_key).
  ///
  /// See also: `stampGetPrivateKey`.

  Future<TGetPrivateKeyResponse> getPrivateKey({
    required TGetPrivateKeyBody input,
  }) async {
    return await request<TGetPrivateKeyResponse, TGetPrivateKeyBody>(
      uri: "/public/v1/query/get_private_key",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPrivateKey`.

  Future<TSignedRequest> stampGetPrivateKey({
    required TGetPrivateKeyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_private_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a User
  ///
  /// Sign the provided `TGetUserBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_user).
  ///
  /// See also: `stampGetUser`.

  Future<TGetUserResponse> getUser({
    required TGetUserBody input,
  }) async {
    return await request<TGetUserResponse, TGetUserBody>(
      uri: "/public/v1/query/get_user",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.
  ///
  /// See also: `GetUser`.

  Future<TSignedRequest> stampGetUser({
    required TGetUserBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_user';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a Wallet
  ///
  /// Sign the provided `TGetWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_wallet).
  ///
  /// See also: `stampGetWallet`.

  Future<TGetWalletResponse> getWallet({
    required TGetWalletBody input,
  }) async {
    return await request<TGetWalletResponse, TGetWalletBody>(
      uri: "/public/v1/query/get_wallet",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWallet`.

  Future<TSignedRequest> stampGetWallet({
    required TGetWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all Activities within an Organization
  ///
  /// Sign the provided `TGetActivitiesBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_activities).
  ///
  /// See also: `stampGetActivities`.

  Future<TGetActivitiesResponse> getActivities({
    required TGetActivitiesBody input,
  }) async {
    return await request<TGetActivitiesResponse, TGetActivitiesBody>(
      uri: "/public/v1/query/list_activities",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.
  ///
  /// See also: `GetActivities`.

  Future<TSignedRequest> stampGetActivities({
    required TGetActivitiesBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_activities';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all Policies within an Organization
  ///
  /// Sign the provided `TGetPoliciesBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_policies).
  ///
  /// See also: `stampGetPolicies`.

  Future<TGetPoliciesResponse> getPolicies({
    required TGetPoliciesBody input,
  }) async {
    return await request<TGetPoliciesResponse, TGetPoliciesBody>(
      uri: "/public/v1/query/list_policies",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPolicies`.

  Future<TSignedRequest> stampGetPolicies({
    required TGetPoliciesBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_policies';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all Private Key Tags within an Organization
  ///
  /// Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_private_key_tags).
  ///
  /// See also: `stampListPrivateKeyTags`.

  Future<TListPrivateKeyTagsResponse> listPrivateKeyTags({
    required TListPrivateKeyTagsBody input,
  }) async {
    return await request<TListPrivateKeyTagsResponse, TListPrivateKeyTagsBody>(
      uri: "/public/v1/query/list_private_key_tags",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.
  ///
  /// See also: `ListPrivateKeyTags`.

  Future<TSignedRequest> stampListPrivateKeyTags({
    required TListPrivateKeyTagsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_private_key_tags';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all Private Keys within an Organization
  ///
  /// Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_private_keys).
  ///
  /// See also: `stampGetPrivateKeys`.

  Future<TGetPrivateKeysResponse> getPrivateKeys({
    required TGetPrivateKeysBody input,
  }) async {
    return await request<TGetPrivateKeysResponse, TGetPrivateKeysBody>(
      uri: "/public/v1/query/list_private_keys",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPrivateKeys`.

  Future<TSignedRequest> stampGetPrivateKeys({
    required TGetPrivateKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_private_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get all suborg IDs associated given a parent org ID and an optional filter.
  ///
  /// Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_suborgs).
  ///
  /// See also: `stampGetSubOrgIds`.

  Future<TGetSubOrgIdsResponse> getSubOrgIds({
    required TGetSubOrgIdsBody input,
  }) async {
    return await request<TGetSubOrgIdsResponse, TGetSubOrgIdsBody>(
      uri: "/public/v1/query/list_suborgs",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetSubOrgIds`.

  Future<TSignedRequest> stampGetSubOrgIds({
    required TGetSubOrgIdsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_suborgs';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all User Tags within an Organization
  ///
  /// Sign the provided `TListUserTagsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_user_tags).
  ///
  /// See also: `stampListUserTags`.

  Future<TListUserTagsResponse> listUserTags({
    required TListUserTagsBody input,
  }) async {
    return await request<TListUserTagsResponse, TListUserTagsBody>(
      uri: "/public/v1/query/list_user_tags",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.
  ///
  /// See also: `ListUserTags`.

  Future<TSignedRequest> stampListUserTags({
    required TListUserTagsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_user_tags';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all Users within an Organization
  ///
  /// Sign the provided `TGetUsersBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_users).
  ///
  /// See also: `stampGetUsers`.

  Future<TGetUsersResponse> getUsers({
    required TGetUsersBody input,
  }) async {
    return await request<TGetUsersResponse, TGetUsersBody>(
      uri: "/public/v1/query/list_users",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.
  ///
  /// See also: `GetUsers`.

  Future<TSignedRequest> stampGetUsers({
    required TGetUsersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_users';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get all email or phone verified suborg IDs associated given a parent org ID.
  ///
  /// Sign the provided `TGetVerifiedSubOrgIdsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_verified_suborgs).
  ///
  /// See also: `stampGetVerifiedSubOrgIds`.

  Future<TGetVerifiedSubOrgIdsResponse> getVerifiedSubOrgIds({
    required TGetVerifiedSubOrgIdsBody input,
  }) async {
    return await request<TGetVerifiedSubOrgIdsResponse,
        TGetVerifiedSubOrgIdsBody>(
      uri: "/public/v1/query/list_verified_suborgs",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetVerifiedSubOrgIdsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetVerifiedSubOrgIds`.

  Future<TSignedRequest> stampGetVerifiedSubOrgIds({
    required TGetVerifiedSubOrgIdsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_verified_suborgs';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all Accounts wirhin a Wallet
  ///
  /// Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_wallet_accounts).
  ///
  /// See also: `stampGetWalletAccounts`.

  Future<TGetWalletAccountsResponse> getWalletAccounts({
    required TGetWalletAccountsBody input,
  }) async {
    return await request<TGetWalletAccountsResponse, TGetWalletAccountsBody>(
      uri: "/public/v1/query/list_wallet_accounts",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWalletAccounts`.

  Future<TSignedRequest> stampGetWalletAccounts({
    required TGetWalletAccountsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_wallet_accounts';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all Wallets within an Organization
  ///
  /// Sign the provided `TGetWalletsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_wallets).
  ///
  /// See also: `stampGetWallets`.

  Future<TGetWalletsResponse> getWallets({
    required TGetWalletsBody input,
  }) async {
    return await request<TGetWalletsResponse, TGetWalletsBody>(
      uri: "/public/v1/query/list_wallets",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWallets`.

  Future<TSignedRequest> stampGetWallets({
    required TGetWalletsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_wallets';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
  ///
  /// Sign the provided `TGetWhoamiBody` with the client's `stamp` function and submit the request (POST /public/v1/query/whoami).
  ///
  /// See also: `stampGetWhoami`.

  Future<TGetWhoamiResponse> getWhoami({
    required TGetWhoamiBody input,
  }) async {
    return await request<TGetWhoamiResponse, TGetWhoamiBody>(
      uri: "/public/v1/query/whoami",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWhoami`.

  Future<TSignedRequest> stampGetWhoami({
    required TGetWhoamiBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/whoami';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Approve an Activity
  ///
  /// Sign the provided `TApproveActivityBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/approve_activity).
  ///
  /// See also: `stampApproveActivity`.

  Future<TApproveActivityResponse> approveActivity({
    required TApproveActivityBody input,
  }) async {
    return await request<TApproveActivityResponse, TApproveActivityBody>(
      uri: "/public/v1/submit/approve_activity",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.
  ///
  /// See also: `ApproveActivity`.

  Future<TSignedRequest> stampApproveActivity({
    required TApproveActivityBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/approve_activity';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Add api keys to an existing User
  ///
  /// Sign the provided `TCreateApiKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_api_keys).
  ///
  /// See also: `stampCreateApiKeys`.

  Future<TCreateApiKeysResponse> createApiKeys({
    required TCreateApiKeysBody input,
  }) async {
    return await request<TCreateApiKeysResponse, TCreateApiKeysBody>(
      uri: "/public/v1/submit/create_api_keys",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateApiKeys`.

  Future<TSignedRequest> stampCreateApiKeys({
    required TCreateApiKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_api_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create API-only Users in an existing Organization
  ///
  /// Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_api_only_users).
  ///
  /// See also: `stampCreateApiOnlyUsers`.

  Future<TCreateApiOnlyUsersResponse> createApiOnlyUsers({
    required TCreateApiOnlyUsersBody input,
  }) async {
    return await request<TCreateApiOnlyUsersResponse, TCreateApiOnlyUsersBody>(
      uri: "/public/v1/submit/create_api_only_users",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateApiOnlyUsers`.

  Future<TSignedRequest> stampCreateApiOnlyUsers({
    required TCreateApiOnlyUsersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_api_only_users';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create Authenticators to authenticate requests to Turnkey
  ///
  /// Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_authenticators).
  ///
  /// See also: `stampCreateAuthenticators`.

  Future<TCreateAuthenticatorsResponse> createAuthenticators({
    required TCreateAuthenticatorsBody input,
  }) async {
    return await request<TCreateAuthenticatorsResponse,
        TCreateAuthenticatorsBody>(
      uri: "/public/v1/submit/create_authenticators",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateAuthenticators`.

  Future<TSignedRequest> stampCreateAuthenticators({
    required TCreateAuthenticatorsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_authenticators';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create Invitations to join an existing Organization
  ///
  /// Sign the provided `TCreateInvitationsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_invitations).
  ///
  /// See also: `stampCreateInvitations`.

  Future<TCreateInvitationsResponse> createInvitations({
    required TCreateInvitationsBody input,
  }) async {
    return await request<TCreateInvitationsResponse, TCreateInvitationsBody>(
      uri: "/public/v1/submit/create_invitations",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateInvitations`.

  Future<TSignedRequest> stampCreateInvitations({
    required TCreateInvitationsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_invitations';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Creates Oauth providers for a specified user - BETA
  ///
  /// Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_oauth_providers).
  ///
  /// See also: `stampCreateOauthProviders`.

  Future<TCreateOauthProvidersResponse> createOauthProviders({
    required TCreateOauthProvidersBody input,
  }) async {
    return await request<TCreateOauthProvidersResponse,
        TCreateOauthProvidersBody>(
      uri: "/public/v1/submit/create_oauth_providers",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateOauthProviders`.

  Future<TSignedRequest> stampCreateOauthProviders({
    required TCreateOauthProvidersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_oauth_providers';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create new Policies
  ///
  /// Sign the provided `TCreatePoliciesBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_policies).
  ///
  /// See also: `stampCreatePolicies`.

  Future<TCreatePoliciesResponse> createPolicies({
    required TCreatePoliciesBody input,
  }) async {
    return await request<TCreatePoliciesResponse, TCreatePoliciesBody>(
      uri: "/public/v1/submit/create_policies",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.
  ///
  /// See also: `CreatePolicies`.

  Future<TSignedRequest> stampCreatePolicies({
    required TCreatePoliciesBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_policies';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a new Policy
  ///
  /// Sign the provided `TCreatePolicyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_policy).
  ///
  /// See also: `stampCreatePolicy`.

  Future<TCreatePolicyResponse> createPolicy({
    required TCreatePolicyBody input,
  }) async {
    return await request<TCreatePolicyResponse, TCreatePolicyBody>(
      uri: "/public/v1/submit/create_policy",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.
  ///
  /// See also: `CreatePolicy`.

  Future<TSignedRequest> stampCreatePolicy({
    required TCreatePolicyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_policy';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a private key tag and add it to private keys.
  ///
  /// Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_private_key_tag).
  ///
  /// See also: `stampCreatePrivateKeyTag`.

  Future<TCreatePrivateKeyTagResponse> createPrivateKeyTag({
    required TCreatePrivateKeyTagBody input,
  }) async {
    return await request<TCreatePrivateKeyTagResponse,
        TCreatePrivateKeyTagBody>(
      uri: "/public/v1/submit/create_private_key_tag",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.
  ///
  /// See also: `CreatePrivateKeyTag`.

  Future<TSignedRequest> stampCreatePrivateKeyTag({
    required TCreatePrivateKeyTagBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_private_key_tag';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create new Private Keys
  ///
  /// Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_private_keys).
  ///
  /// See also: `stampCreatePrivateKeys`.

  Future<TCreatePrivateKeysResponse> createPrivateKeys({
    required TCreatePrivateKeysBody input,
  }) async {
    return await request<TCreatePrivateKeysResponse, TCreatePrivateKeysBody>(
      uri: "/public/v1/submit/create_private_keys",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `CreatePrivateKeys`.

  Future<TSignedRequest> stampCreatePrivateKeys({
    required TCreatePrivateKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_private_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a read only session for a user (valid for 1 hour)
  ///
  /// Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_read_only_session).
  ///
  /// See also: `stampCreateReadOnlySession`.

  Future<TCreateReadOnlySessionResponse> createReadOnlySession({
    required TCreateReadOnlySessionBody input,
  }) async {
    return await request<TCreateReadOnlySessionResponse,
        TCreateReadOnlySessionBody>(
      uri: "/public/v1/submit/create_read_only_session",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateReadOnlySession`.

  Future<TSignedRequest> stampCreateReadOnlySession({
    required TCreateReadOnlySessionBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/create_read_only_session';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a read write session for a user
  ///
  /// Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_read_write_session).
  ///
  /// See also: `stampCreateReadWriteSession`.

  Future<TCreateReadWriteSessionResponse> createReadWriteSession({
    required TCreateReadWriteSessionBody input,
  }) async {
    return await request<TCreateReadWriteSessionResponse,
        TCreateReadWriteSessionBody>(
      uri: "/public/v1/submit/create_read_write_session",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateReadWriteSession`.

  Future<TSignedRequest> stampCreateReadWriteSession({
    required TCreateReadWriteSessionBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/create_read_write_session';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a new Sub-Organization
  ///
  /// Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_sub_organization).
  ///
  /// See also: `stampCreateSubOrganization`.

  Future<TCreateSubOrganizationResponse> createSubOrganization({
    required TCreateSubOrganizationBody input,
  }) async {
    return await request<TCreateSubOrganizationResponse,
        TCreateSubOrganizationBody>(
      uri: "/public/v1/submit/create_sub_organization",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateSubOrganization`.

  Future<TSignedRequest> stampCreateSubOrganization({
    required TCreateSubOrganizationBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/create_sub_organization';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a user tag and add it to users.
  ///
  /// Sign the provided `TCreateUserTagBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_user_tag).
  ///
  /// See also: `stampCreateUserTag`.

  Future<TCreateUserTagResponse> createUserTag({
    required TCreateUserTagBody input,
  }) async {
    return await request<TCreateUserTagResponse, TCreateUserTagBody>(
      uri: "/public/v1/submit/create_user_tag",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateUserTag`.

  Future<TSignedRequest> stampCreateUserTag({
    required TCreateUserTagBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_user_tag';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create Users in an existing Organization
  ///
  /// Sign the provided `TCreateUsersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_users).
  ///
  /// See also: `stampCreateUsers`.

  Future<TCreateUsersResponse> createUsers({
    required TCreateUsersBody input,
  }) async {
    return await request<TCreateUsersResponse, TCreateUsersBody>(
      uri: "/public/v1/submit/create_users",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateUsers`.

  Future<TSignedRequest> stampCreateUsers({
    required TCreateUsersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_users';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a Wallet and derive addresses
  ///
  /// Sign the provided `TCreateWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_wallet).
  ///
  /// See also: `stampCreateWallet`.

  Future<TCreateWalletResponse> createWallet({
    required TCreateWalletBody input,
  }) async {
    return await request<TCreateWalletResponse, TCreateWalletBody>(
      uri: "/public/v1/submit/create_wallet",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateWallet`.

  Future<TSignedRequest> stampCreateWallet({
    required TCreateWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Derive additional addresses using an existing wallet
  ///
  /// Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_wallet_accounts).
  ///
  /// See also: `stampCreateWalletAccounts`.

  Future<TCreateWalletAccountsResponse> createWalletAccounts({
    required TCreateWalletAccountsBody input,
  }) async {
    return await request<TCreateWalletAccountsResponse,
        TCreateWalletAccountsBody>(
      uri: "/public/v1/submit/create_wallet_accounts",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateWalletAccounts`.

  Future<TSignedRequest> stampCreateWalletAccounts({
    required TCreateWalletAccountsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_wallet_accounts';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Remove api keys from a User
  ///
  /// Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_api_keys).
  ///
  /// See also: `stampDeleteApiKeys`.

  Future<TDeleteApiKeysResponse> deleteApiKeys({
    required TDeleteApiKeysBody input,
  }) async {
    return await request<TDeleteApiKeysResponse, TDeleteApiKeysBody>(
      uri: "/public/v1/submit/delete_api_keys",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteApiKeys`.

  Future<TSignedRequest> stampDeleteApiKeys({
    required TDeleteApiKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_api_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Remove authenticators from a User
  ///
  /// Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_authenticators).
  ///
  /// See also: `stampDeleteAuthenticators`.

  Future<TDeleteAuthenticatorsResponse> deleteAuthenticators({
    required TDeleteAuthenticatorsBody input,
  }) async {
    return await request<TDeleteAuthenticatorsResponse,
        TDeleteAuthenticatorsBody>(
      uri: "/public/v1/submit/delete_authenticators",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteAuthenticators`.

  Future<TSignedRequest> stampDeleteAuthenticators({
    required TDeleteAuthenticatorsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_authenticators';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete an existing Invitation
  ///
  /// Sign the provided `TDeleteInvitationBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_invitation).
  ///
  /// See also: `stampDeleteInvitation`.

  Future<TDeleteInvitationResponse> deleteInvitation({
    required TDeleteInvitationBody input,
  }) async {
    return await request<TDeleteInvitationResponse, TDeleteInvitationBody>(
      uri: "/public/v1/submit/delete_invitation",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteInvitation`.

  Future<TSignedRequest> stampDeleteInvitation({
    required TDeleteInvitationBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_invitation';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Removes Oauth providers for a specified user - BETA
  ///
  /// Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_oauth_providers).
  ///
  /// See also: `stampDeleteOauthProviders`.

  Future<TDeleteOauthProvidersResponse> deleteOauthProviders({
    required TDeleteOauthProvidersBody input,
  }) async {
    return await request<TDeleteOauthProvidersResponse,
        TDeleteOauthProvidersBody>(
      uri: "/public/v1/submit/delete_oauth_providers",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteOauthProviders`.

  Future<TSignedRequest> stampDeleteOauthProviders({
    required TDeleteOauthProvidersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_oauth_providers';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete an existing Policy
  ///
  /// Sign the provided `TDeletePolicyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_policy).
  ///
  /// See also: `stampDeletePolicy`.

  Future<TDeletePolicyResponse> deletePolicy({
    required TDeletePolicyBody input,
  }) async {
    return await request<TDeletePolicyResponse, TDeletePolicyBody>(
      uri: "/public/v1/submit/delete_policy",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.
  ///
  /// See also: `DeletePolicy`.

  Future<TSignedRequest> stampDeletePolicy({
    required TDeletePolicyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_policy';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete Private Key Tags within an Organization
  ///
  /// Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_private_key_tags).
  ///
  /// See also: `stampDeletePrivateKeyTags`.

  Future<TDeletePrivateKeyTagsResponse> deletePrivateKeyTags({
    required TDeletePrivateKeyTagsBody input,
  }) async {
    return await request<TDeletePrivateKeyTagsResponse,
        TDeletePrivateKeyTagsBody>(
      uri: "/public/v1/submit/delete_private_key_tags",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.
  ///
  /// See also: `DeletePrivateKeyTags`.

  Future<TSignedRequest> stampDeletePrivateKeyTags({
    required TDeletePrivateKeyTagsBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/delete_private_key_tags';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Deletes private keys for an organization
  ///
  /// Sign the provided `TDeletePrivateKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_private_keys).
  ///
  /// See also: `stampDeletePrivateKeys`.

  Future<TDeletePrivateKeysResponse> deletePrivateKeys({
    required TDeletePrivateKeysBody input,
  }) async {
    return await request<TDeletePrivateKeysResponse, TDeletePrivateKeysBody>(
      uri: "/public/v1/submit/delete_private_keys",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeletePrivateKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `DeletePrivateKeys`.

  Future<TSignedRequest> stampDeletePrivateKeys({
    required TDeletePrivateKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_private_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Deletes a sub organization
  ///
  /// Sign the provided `TDeleteSubOrganizationBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_sub_organization).
  ///
  /// See also: `stampDeleteSubOrganization`.

  Future<TDeleteSubOrganizationResponse> deleteSubOrganization({
    required TDeleteSubOrganizationBody input,
  }) async {
    return await request<TDeleteSubOrganizationResponse,
        TDeleteSubOrganizationBody>(
      uri: "/public/v1/submit/delete_sub_organization",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeleteSubOrganizationBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteSubOrganization`.

  Future<TSignedRequest> stampDeleteSubOrganization({
    required TDeleteSubOrganizationBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/delete_sub_organization';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete User Tags within an Organization
  ///
  /// Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_user_tags).
  ///
  /// See also: `stampDeleteUserTags`.

  Future<TDeleteUserTagsResponse> deleteUserTags({
    required TDeleteUserTagsBody input,
  }) async {
    return await request<TDeleteUserTagsResponse, TDeleteUserTagsBody>(
      uri: "/public/v1/submit/delete_user_tags",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteUserTags`.

  Future<TSignedRequest> stampDeleteUserTags({
    required TDeleteUserTagsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_user_tags';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete Users within an Organization
  ///
  /// Sign the provided `TDeleteUsersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_users).
  ///
  /// See also: `stampDeleteUsers`.

  Future<TDeleteUsersResponse> deleteUsers({
    required TDeleteUsersBody input,
  }) async {
    return await request<TDeleteUsersResponse, TDeleteUsersBody>(
      uri: "/public/v1/submit/delete_users",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteUsers`.

  Future<TSignedRequest> stampDeleteUsers({
    required TDeleteUsersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_users';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Deletes wallets for an organization
  ///
  /// Sign the provided `TDeleteWalletsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_wallets).
  ///
  /// See also: `stampDeleteWallets`.

  Future<TDeleteWalletsResponse> deleteWallets({
    required TDeleteWalletsBody input,
  }) async {
    return await request<TDeleteWalletsResponse, TDeleteWalletsBody>(
      uri: "/public/v1/submit/delete_wallets",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TDeleteWalletsBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteWallets`.

  Future<TSignedRequest> stampDeleteWallets({
    required TDeleteWalletsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_wallets';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Authenticate a user via Email
  ///
  /// Sign the provided `TEmailAuthBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/email_auth).
  ///
  /// See also: `stampEmailAuth`.

  Future<TEmailAuthResponse> emailAuth({
    required TEmailAuthBody input,
  }) async {
    return await request<TEmailAuthResponse, TEmailAuthBody>(
      uri: "/public/v1/submit/email_auth",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.
  ///
  /// See also: `EmailAuth`.

  Future<TSignedRequest> stampEmailAuth({
    required TEmailAuthBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/email_auth';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Exports a Private Key
  ///
  /// Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/export_private_key).
  ///
  /// See also: `stampExportPrivateKey`.

  Future<TExportPrivateKeyResponse> exportPrivateKey({
    required TExportPrivateKeyBody input,
  }) async {
    return await request<TExportPrivateKeyResponse, TExportPrivateKeyBody>(
      uri: "/public/v1/submit/export_private_key",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `ExportPrivateKey`.

  Future<TSignedRequest> stampExportPrivateKey({
    required TExportPrivateKeyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/export_private_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Exports a Wallet
  ///
  /// Sign the provided `TExportWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/export_wallet).
  ///
  /// See also: `stampExportWallet`.

  Future<TExportWalletResponse> exportWallet({
    required TExportWalletBody input,
  }) async {
    return await request<TExportWalletResponse, TExportWalletBody>(
      uri: "/public/v1/submit/export_wallet",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `ExportWallet`.

  Future<TSignedRequest> stampExportWallet({
    required TExportWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/export_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Exports a Wallet Account
  ///
  /// Sign the provided `TExportWalletAccountBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/export_wallet_account).
  ///
  /// See also: `stampExportWalletAccount`.

  Future<TExportWalletAccountResponse> exportWalletAccount({
    required TExportWalletAccountBody input,
  }) async {
    return await request<TExportWalletAccountResponse,
        TExportWalletAccountBody>(
      uri: "/public/v1/submit/export_wallet_account",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.
  ///
  /// See also: `ExportWalletAccount`.

  Future<TSignedRequest> stampExportWalletAccount({
    required TExportWalletAccountBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/export_wallet_account';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Imports a private key
  ///
  /// Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/import_private_key).
  ///
  /// See also: `stampImportPrivateKey`.

  Future<TImportPrivateKeyResponse> importPrivateKey({
    required TImportPrivateKeyBody input,
  }) async {
    return await request<TImportPrivateKeyResponse, TImportPrivateKeyBody>(
      uri: "/public/v1/submit/import_private_key",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `ImportPrivateKey`.

  Future<TSignedRequest> stampImportPrivateKey({
    required TImportPrivateKeyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/import_private_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Imports a wallet
  ///
  /// Sign the provided `TImportWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/import_wallet).
  ///
  /// See also: `stampImportWallet`.

  Future<TImportWalletResponse> importWallet({
    required TImportWalletBody input,
  }) async {
    return await request<TImportWalletResponse, TImportWalletBody>(
      uri: "/public/v1/submit/import_wallet",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `ImportWallet`.

  Future<TSignedRequest> stampImportWallet({
    required TImportWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/import_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initializes a new private key import
  ///
  /// Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_import_private_key).
  ///
  /// See also: `stampInitImportPrivateKey`.

  Future<TInitImportPrivateKeyResponse> initImportPrivateKey({
    required TInitImportPrivateKeyBody input,
  }) async {
    return await request<TInitImportPrivateKeyResponse,
        TInitImportPrivateKeyBody>(
      uri: "/public/v1/submit/init_import_private_key",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `InitImportPrivateKey`.

  Future<TSignedRequest> stampInitImportPrivateKey({
    required TInitImportPrivateKeyBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/init_import_private_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initializes a new wallet import
  ///
  /// Sign the provided `TInitImportWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_import_wallet).
  ///
  /// See also: `stampInitImportWallet`.

  Future<TInitImportWalletResponse> initImportWallet({
    required TInitImportWalletBody input,
  }) async {
    return await request<TInitImportWalletResponse, TInitImportWalletBody>(
      uri: "/public/v1/submit/init_import_wallet",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `InitImportWallet`.

  Future<TSignedRequest> stampInitImportWallet({
    required TInitImportWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/init_import_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initiate an OTP auth activity
  ///
  /// Sign the provided `TInitOtpAuthBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_otp_auth).
  ///
  /// See also: `stampInitOtpAuth`.

  Future<TInitOtpAuthResponse> initOtpAuth({
    required TInitOtpAuthBody input,
  }) async {
    return await request<TInitOtpAuthResponse, TInitOtpAuthBody>(
      uri: "/public/v1/submit/init_otp_auth",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TInitOtpAuthBody` by using the client's `stamp` function.
  ///
  /// See also: `InitOtpAuth`.

  Future<TSignedRequest> stampInitOtpAuth({
    required TInitOtpAuthBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/init_otp_auth';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initializes a new email recovery
  ///
  /// Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_user_email_recovery).
  ///
  /// See also: `stampInitUserEmailRecovery`.

  Future<TInitUserEmailRecoveryResponse> initUserEmailRecovery({
    required TInitUserEmailRecoveryBody input,
  }) async {
    return await request<TInitUserEmailRecoveryResponse,
        TInitUserEmailRecoveryBody>(
      uri: "/public/v1/submit/init_user_email_recovery",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.
  ///
  /// See also: `InitUserEmailRecovery`.

  Future<TSignedRequest> stampInitUserEmailRecovery({
    required TInitUserEmailRecoveryBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/init_user_email_recovery';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Authenticate a user with an Oidc token (Oauth) - BETA
  ///
  /// Sign the provided `TOauthBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/oauth).
  ///
  /// See also: `stampOauth`.

  Future<TOauthResponse> oauth({
    required TOauthBody input,
  }) async {
    return await request<TOauthResponse, TOauthBody>(
      uri: "/public/v1/submit/oauth",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.
  ///
  /// See also: `Oauth`.

  Future<TSignedRequest> stampOauth({
    required TOauthBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/oauth';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Authenticate a user with an OTP code sent via email or SMS
  ///
  /// Sign the provided `TOtpAuthBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/otp_auth).
  ///
  /// See also: `stampOtpAuth`.

  Future<TOtpAuthResponse> otpAuth({
    required TOtpAuthBody input,
  }) async {
    return await request<TOtpAuthResponse, TOtpAuthBody>(
      uri: "/public/v1/submit/otp_auth",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TOtpAuthBody` by using the client's `stamp` function.
  ///
  /// See also: `OtpAuth`.

  Future<TSignedRequest> stampOtpAuth({
    required TOtpAuthBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/otp_auth';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Completes the process of recovering a user by adding an authenticator
  ///
  /// Sign the provided `TRecoverUserBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/recover_user).
  ///
  /// See also: `stampRecoverUser`.

  Future<TRecoverUserResponse> recoverUser({
    required TRecoverUserBody input,
  }) async {
    return await request<TRecoverUserResponse, TRecoverUserBody>(
      uri: "/public/v1/submit/recover_user",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.
  ///
  /// See also: `RecoverUser`.

  Future<TSignedRequest> stampRecoverUser({
    required TRecoverUserBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/recover_user';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Reject an Activity
  ///
  /// Sign the provided `TRejectActivityBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/reject_activity).
  ///
  /// See also: `stampRejectActivity`.

  Future<TRejectActivityResponse> rejectActivity({
    required TRejectActivityBody input,
  }) async {
    return await request<TRejectActivityResponse, TRejectActivityBody>(
      uri: "/public/v1/submit/reject_activity",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.
  ///
  /// See also: `RejectActivity`.

  Future<TSignedRequest> stampRejectActivity({
    required TRejectActivityBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/reject_activity';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Removes an organization feature. This activity must be approved by the current root quorum.
  ///
  /// Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/remove_organization_feature).
  ///
  /// See also: `stampRemoveOrganizationFeature`.

  Future<TRemoveOrganizationFeatureResponse> removeOrganizationFeature({
    required TRemoveOrganizationFeatureBody input,
  }) async {
    return await request<TRemoveOrganizationFeatureResponse,
        TRemoveOrganizationFeatureBody>(
      uri: "/public/v1/submit/remove_organization_feature",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.
  ///
  /// See also: `RemoveOrganizationFeature`.

  Future<TSignedRequest> stampRemoveOrganizationFeature({
    required TRemoveOrganizationFeatureBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/remove_organization_feature';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Sets an organization feature. This activity must be approved by the current root quorum.
  ///
  /// Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/set_organization_feature).
  ///
  /// See also: `stampSetOrganizationFeature`.

  Future<TSetOrganizationFeatureResponse> setOrganizationFeature({
    required TSetOrganizationFeatureBody input,
  }) async {
    return await request<TSetOrganizationFeatureResponse,
        TSetOrganizationFeatureBody>(
      uri: "/public/v1/submit/set_organization_feature",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.
  ///
  /// See also: `SetOrganizationFeature`.

  Future<TSignedRequest> stampSetOrganizationFeature({
    required TSetOrganizationFeatureBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/set_organization_feature';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Sign a raw payload
  ///
  /// Sign the provided `TSignRawPayloadBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/sign_raw_payload).
  ///
  /// See also: `stampSignRawPayload`.

  Future<TSignRawPayloadResponse> signRawPayload({
    required TSignRawPayloadBody input,
  }) async {
    return await request<TSignRawPayloadResponse, TSignRawPayloadBody>(
      uri: "/public/v1/submit/sign_raw_payload",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.
  ///
  /// See also: `SignRawPayload`.

  Future<TSignedRequest> stampSignRawPayload({
    required TSignRawPayloadBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/sign_raw_payload';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Sign multiple raw payloads with the same signing parameters
  ///
  /// Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/sign_raw_payloads).
  ///
  /// See also: `stampSignRawPayloads`.

  Future<TSignRawPayloadsResponse> signRawPayloads({
    required TSignRawPayloadsBody input,
  }) async {
    return await request<TSignRawPayloadsResponse, TSignRawPayloadsBody>(
      uri: "/public/v1/submit/sign_raw_payloads",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.
  ///
  /// See also: `SignRawPayloads`.

  Future<TSignedRequest> stampSignRawPayloads({
    required TSignRawPayloadsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/sign_raw_payloads';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Sign a transaction
  ///
  /// Sign the provided `TSignTransactionBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/sign_transaction).
  ///
  /// See also: `stampSignTransaction`.

  Future<TSignTransactionResponse> signTransaction({
    required TSignTransactionBody input,
  }) async {
    return await request<TSignTransactionResponse, TSignTransactionBody>(
      uri: "/public/v1/submit/sign_transaction",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.
  ///
  /// See also: `SignTransaction`.

  Future<TSignedRequest> stampSignTransaction({
    required TSignTransactionBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/sign_transaction';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update an existing Policy
  ///
  /// Sign the provided `TUpdatePolicyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_policy).
  ///
  /// See also: `stampUpdatePolicy`.

  Future<TUpdatePolicyResponse> updatePolicy({
    required TUpdatePolicyBody input,
  }) async {
    return await request<TUpdatePolicyResponse, TUpdatePolicyBody>(
      uri: "/public/v1/submit/update_policy",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdatePolicy`.

  Future<TSignedRequest> stampUpdatePolicy({
    required TUpdatePolicyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_policy';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_private_key_tag).
  ///
  /// See also: `stampUpdatePrivateKeyTag`.

  Future<TUpdatePrivateKeyTagResponse> updatePrivateKeyTag({
    required TUpdatePrivateKeyTagBody input,
  }) async {
    return await request<TUpdatePrivateKeyTagResponse,
        TUpdatePrivateKeyTagBody>(
      uri: "/public/v1/submit/update_private_key_tag",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdatePrivateKeyTag`.

  Future<TSignedRequest> stampUpdatePrivateKeyTag({
    required TUpdatePrivateKeyTagBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_private_key_tag';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
  ///
  /// Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_root_quorum).
  ///
  /// See also: `stampUpdateRootQuorum`.

  Future<TUpdateRootQuorumResponse> updateRootQuorum({
    required TUpdateRootQuorumBody input,
  }) async {
    return await request<TUpdateRootQuorumResponse, TUpdateRootQuorumBody>(
      uri: "/public/v1/submit/update_root_quorum",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateRootQuorum`.

  Future<TSignedRequest> stampUpdateRootQuorum({
    required TUpdateRootQuorumBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_root_quorum';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update a User in an existing Organization
  ///
  /// Sign the provided `TUpdateUserBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_user).
  ///
  /// See also: `stampUpdateUser`.

  Future<TUpdateUserResponse> updateUser({
    required TUpdateUserBody input,
  }) async {
    return await request<TUpdateUserResponse, TUpdateUserBody>(
      uri: "/public/v1/submit/update_user",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateUser`.

  Future<TSignedRequest> stampUpdateUser({
    required TUpdateUserBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_user';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// Sign the provided `TUpdateUserTagBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_user_tag).
  ///
  /// See also: `stampUpdateUserTag`.

  Future<TUpdateUserTagResponse> updateUserTag({
    required TUpdateUserTagBody input,
  }) async {
    return await request<TUpdateUserTagResponse, TUpdateUserTagBody>(
      uri: "/public/v1/submit/update_user_tag",
      body: input,
    );
  }

  /// Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateUserTag`.

  Future<TSignedRequest> stampUpdateUserTag({
    required TUpdateUserTagBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_user_tag';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }
}
